var searchIndex = new Map(JSON.parse('[\
["halo2",{"doc":"halo2","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["halo2_proofs",{"doc":"halo2_proofs","t":"PPPGCNNCNNNNCNNNENNCCNCNNNNRRRTKKRKKTRRTMMMMHHHMNMMHMHMMMMNNMHHMHNNMHHNNMMFFKRKRFFFFRFFFKFNNNNNNNNNNNNNNNNNMNNNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNMNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNNNNNNNNNNNNNNNNNNNNNNNNNCMNNNNNNNNNNNNNNNMNMNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGKFPKKMNMNMNMMNNNNNNNNNNNMNMNNNNNNNMNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNPPGEFFPPGPPPFPPPPFPGNNNNNNNNNNNNNNNNNNNNNHNNNNNNCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGFPPPFFFFFOONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNHHNONNNNNNNONNNNNNNNOOOOOONOOOONNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPPFGGKFPFPKFPPKRPFFPFGGFFPPFKRFFPPFPPPPPPPRKFFPFPPFFPPPFGPFPPPPFFFPNNNNNNNNNNNNNNNNMNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNMNNMNNMNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNOFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFGFFKFRPRFFFFPKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNCNNNNMNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKRRKRRKKRKRRKTTRKNNNMMMNNMNNMMMNNNMNMNMNNMNNMNNNMMMMNMMMMMNNNNMMNMCCCCFFINNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNCCCCFFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFKRFFKKKKKNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNMNMMNNNNNNNNNNNNNNNNMNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNN","n":["Processed","RawBytes","RawBytesUnchecked","SerdeFormat","arithmetic","borrow","borrow_mut","circuit","clone","clone_into","deref","deref_mut","dev","drop","fmt","from","halo2curves","init","into","plonk","poly","to_owned","transcript","try_from","try_into","type_id","vzip","AffineExt","Base","Base","CURVE_ID","CurveAffine","CurveExt","CurveExt","FftGroup","Field","ONE","ScalarExt","ScalarExt","ZERO","a","a","b","b","best_fft","best_multiexp","compute_inner_product","coordinates","cube","double","endo","eval_polynomial","from_xy","g_to_lagrange","hash_to_curve","invert","is_on_curve","is_on_curve","is_zero","is_zero_vartime","jacobian_coordinates","kate_division","lagrange_interpolate","new_jacobian","parallelize","pow","pow_vartime","random","recursive_butterfly_arithmetic","small_multiexp","sqrt","sqrt_alt","sqrt_ratio","square","AssignedCell","Cell","Chip","Config","Layouter","Loaded","NamespacedLayouter","Region","RegionIndex","RegionStart","Root","SimpleFloorPlanner","SimpleTableLayouter","Table","TableLayouter","Value","add","add","add","add","add","add","add","add","add","add","and_then","as_mut","as_ref","assert_if_known","assign_advice","assign_advice_from_constant","assign_advice_from_instance","assign_cell","assign_cell","assign_cell","assign_fixed","assign_region","assign_region","assign_table","assign_table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cloned","column","config","constrain_constant","constrain_equal","constrain_instance","constrain_instance","copied","copied","copy_advice","cube","default","default_and_assigned","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","error_if_known_and","evaluate","evaluate","floor_planner","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get_challenge","get_challenge","get_root","get_root","init","init","init","init","init","init","init","init","init","init","instance_value","into","into","into","into","into","into","into","into","into","into","into_field","invert","known","layouter","loaded","map","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","name_column","namespace","neg","new","pop_namespace","pop_namespace","push_namespace","push_namespace","region_index","row_offset","square","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","synthesize","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","transpose_array","transpose_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unzip","value","value_field","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zip","V1","V1Pass","assign_region","assign_table","borrow","borrow","borrow_mut","borrow_mut","constrain_instance","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_challenge","get_root","init","init","into","into","pop_namespace","push_namespace","synthesize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Column","RegionColumn","RegionLayouter","RegionShape","Selector","SyncDeps","TableLayouter","assign_advice","assign_advice","assign_advice_from_constant","assign_advice_from_constant","assign_advice_from_instance","assign_advice_from_instance","assign_cell","assign_fixed","assign_fixed","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","columns","constrain_constant","constrain_constant","constrain_equal","constrain_equal","deref","deref","deref_mut","deref_mut","drop","drop","enable_selector","enable_selector","eq","fmt","fmt","from","from","from","from","hash","init","init","instance_value","instance_value","into","into","name_column","name_column","new","partial_cmp","region_index","row_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Assigned","CellNotAssigned","CellValue","CircuitCost","CircuitGates","CircuitLayout","ConstraintNotSatisfied","ConstraintPoisoned","FailureLocation","InRegion","InstanceCellNotAssigned","Lookup","MockProver","OutsideRegion","Permutation","Poison","Shuffle","TracingFloorPlanner","Unassigned","VerifyFailure","advice_values","annotate_column","assert_satisfied","assert_satisfied_at_rows_par","assert_satisfied_par","assign_advice","assign_fixed","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_dot_graph","clone","clone","clone_into","clone_into","collect","copy","cost","cost_model","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","enable_selector","enter_region","eq","eq","eq","exit_region","fill_from_row","fixed","fixed_values","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_challenge","init","init","init","init","init","init","init","into","into","into","into","into","into","into","mark_equality_cells","metadata","permutation","pop_namespace","push_namespace","queries_to_csv","query_instance","render","run","show_equality_constraints","show_labels","synthesize","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify_at_rows","verify_at_rows_par","verify_par","view_height","view_width","vzip","vzip","vzip","vzip","vzip","vzip","vzip","offset","region","row","cell_values","column","column","column","constraint","constraint","gate","gate","gate_offset","gate_offset","location","location","location","location","lookup_index","name","name","offset","region","region","row","shuffle_index","CircuitCost","MarginalProofSize","ProofSize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","marginal_proof_size","measure","proof_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CommitmentScheme","CostOptions","IPA","KZGGWC","KZGSHPLONK","Lookup","ModelCircuit","Permutation","Poly","Shuffle","advice","advice_columns","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","column_queries","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","fixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_circuit_to_cost_model_options","from_circuit_to_model_circuit","from_str","gate_degree","init","init","init","init","init","init","init","instance","into","into","into","into","into","into","into","into_model_circuit","k","k","lookup","lookups","max_deg","max_degree","partial_cmp","permutation","permutations","point_sets","rotations","serialize","serialize","shuffle","shuffles","size","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Column","Constraint","Gate","Region","VirtualCell","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column_type","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","index","init","init","init","init","init","into","into","into","into","into","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Advice","Advice","Advice","AdviceQuery","Any","Assigned","Assignment","BatchVerifier","BoundsFailure","Challenge","Challenge","Circuit","Column","ColumnNotAssigned","ColumnNotInPermutation","ColumnType","Config","Constant","Constraint","ConstraintSystem","ConstraintSystemFailure","Constraints","Error","Expression","FirstPhase","Fixed","Fixed","Fixed","FixedQuery","FloorPlanner","FloorPlanner","Gate","Instance","Instance","Instance","InstanceQuery","InstanceTooLarge","InvalidInstances","Negated","NotEnoughColumnsForConstants","NotEnoughRowsAvailable","Opening","OverwriteDefault","Params","Phase","PinnedConstraintSystem","PinnedVerificationKey","Product","ProvingKey","Rational","Scaled","SecondPhase","Selector","Selector","Sum","Synthesis","TableColumn","TableError","TableError","ThirdPhase","Transcript","Trivial","UnevenColumnLengths","UsedColumn","VerifyingKey","VirtualCell","VirtualCells","Zero","add","add","add","add","add","add","add","add_assign","add_assign","add_proof","advice","advice_column","advice_column_in","advice_column_phase","advice_in","advice_queries","annotate_column","annotate_lookup_any_column","annotate_lookup_column","assign_advice","assign_fixed","blinding_factors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","challenge_phase","challenge_usable_after","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","column_index","column_index","column_index","column_type","complex_selector","complexity","compress_selectors","configure","configure_with_params","configure_with_params","constants","constraint_name","copy","create_gate","create_proof","cs","cube","cur","default","default","default","degree","degree","denominator","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","directly_convert_selectors_to_fixed","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","enable_constant","enable_equality","enable_selector","enter_region","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","evaluate_lazy","exit_region","expr","expr","fill_from_row","finalize","fixed_column","fixed_commitments","fixed_queries","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","gates","general_column_annotations","get_challenge","get_domain","get_vk","hash","hash","hash","hash","hash","hash","hash","hash","hash_into","identifier","index","index","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","instance_column","instance_queries","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","invert","is_simple","is_zero_vartime","keygen_pk","keygen_vk","keygen_vk_custom","lookup","lookup_any","lookup_table_column","lookups","minimum_rows","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","name","neg","neg","neg","new","new","next","num_advice_columns","num_challenges","num_fixed_columns","num_instance_columns","num_selectors","numerator","params","params","partial_cmp","partial_cmp","partial_cmp","permutation","permutation","permutation","phase","phase","phase","pinned","pinned","polynomials","pop_namespace","prev","product","push_namespace","query_advice","query_any","query_cell","query_cell","query_cell","query_cell","query_cell","query_cell","query_cells","query_challenge","query_fixed","query_instance","query_instance","query_selector","read","read","rot","rotation","rotation","rotation","selector","set_minimum_degree","shuffle","shuffles","source","square","square","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sum","synthesize","synthesize","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transcript_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unblinded_advice_column","unblinded_advice_column_in","verify_proof","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_selector","without_witnesses","write","write","current_k","Argument","Assembly","VerifyingKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_ordered_mapping","clone","clone","clone","clone_into","clone_into","clone_into","columns","commitments","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","get_columns","init","init","init","into","into","into","mapping","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Basis","Coeff","Error","EvaluationDomain","ExtendedLagrangeCoeff","Guard","LagrangeCoeff","MSMAccumulator","OpeningError","Output","PinnedEvaluationDomain","Polynomial","ProverQuery","Rotation","SamplingError","VerificationStrategy","VerifierQuery","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coeff_from_vec","coeff_to_extended","commitment","constant_extended","constant_lagrange","cur","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","divide_by_vanishing_poly","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty_coeff","empty_extended","empty_lagrange","empty_lagrange_assigned","eq","extended_k","extended_len","extended_to_coeff","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_extended_omega","get_omega","get_omega_inv","get_quotient_poly_degree","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","ipa","iter","iter_mut","k","kzg","l_i_range","lagrange_from_vec","lagrange_to_coeff","mul","new","new","new","new","new_commitment","new_msm","next","num_coeffs","pinned","prev","process","rotate","rotate_extended","rotate_omega","sub","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Blind","CommitmentScheme","Curve","Guard","MSM","MSM","MSMAccumulator","Params","ParamsProver","ParamsProver","ParamsVerifier","ParamsVerifier","ParamsVerifier","Prover","QUERY_INSTANCE","QUERY_INSTANCE","Scalar","Verifier","add","add_assign","add_assign","add_msm","append_term","bases","borrow","borrow_mut","check","clone","clone_into","commit","commit_lagrange","create_proof","default","deref","deref_mut","downsize","drop","empty_msm","eq","eval","fmt","from","get_g","init","into","k","mul","mul_assign","mul_assign","n","new","new","new","new","new_params","read","read_params","scalars","scale","to_owned","try_from","try_into","type_id","verifier_params","verify_proof","vzip","write","commitment","msm","multiopen","strategy","IPACommitmentScheme","ParamsIPA","ParamsVerifierIPA","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit","commit_lagrange","create_proof","deref","deref","deref_mut","deref_mut","downsize","drop","drop","empty_msm","fmt","fmt","from","from","get_g","init","init","into","into","k","n","new","new_params","read","read_params","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifier_params","verify_proof","vzip","vzip","write","MSMIPA","add_constant_term","add_msm","add_msm","add_to_g_scalars","add_to_u_scalar","add_to_w_scalar","append_term","bases","borrow","borrow_mut","check","clone","clone_into","deref","deref_mut","drop","eval","fmt","from","init","into","new","scalars","scale","to_owned","try_from","try_into","type_id","vzip","ProverIPA","VerifierIPA","borrow","borrow","borrow_mut","borrow_mut","create_proof","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","verify_proof","vzip","vzip","Accumulator","AccumulatorStrategy","GuardIPA","SingleStrategy","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_g","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","finalize","finalize","fmt","fmt","fmt","fmt","from","from","from","from","g","init","init","init","init","into","into","into","into","new","new","process","process","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u_packed","use_challenges","use_g","vzip","vzip","vzip","vzip","commitment","msm","multiopen","strategy","KZGCommitmentScheme","ParamsKZG","ParamsVerifierKZG","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","commit","commit_lagrange","deref","deref","deref_mut","deref_mut","downsize","drop","drop","empty_msm","fmt","fmt","from","from","from_parts","g2","get_g","init","init","into","into","k","n","new","new_params","read","read_custom","read_params","s_g2","setup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verifier_params","vzip","vzip","write","write_custom","DualMSM","MSMKZG","add_msm","add_msm","append_term","bases","borrow","borrow","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","combine_with_base","default","deref","deref","deref_mut","deref_mut","drop","drop","eval","fmt","fmt","from","from","from","init","init","into","into","new","new","scalars","scale","scale","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ProverGWC","ProverSHPLONK","VerifierGWC","VerifierSHPLONK","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_proof","create_proof","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","new","new","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_proof","verify_proof","vzip","vzip","vzip","vzip","AccumulatorStrategy","GuardKZG","SingleStrategy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","finalize","finalize","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","new","new","new","new","process","process","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with","Blake2bRead","Blake2bWrite","Challenge255","ChallengeScalar","EncodedChallenge","Input","Keccak256Read","Keccak256Write","Transcript","TranscriptRead","TranscriptReadBuffer","TranscriptWrite","TranscriptWriterBuffer","as_challenge_scalar","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_point","common_point","common_point","common_point","common_point","common_scalar","common_scalar","common_scalar","common_scalar","common_scalar","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","finalize","finalize","finalize","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_scalar","get_scalar","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","new","new","read_point","read_point","read_point","read_scalar","read_scalar","read_scalar","squeeze_challenge","squeeze_challenge","squeeze_challenge","squeeze_challenge","squeeze_challenge","squeeze_challenge_scalar","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","write_point","write_point","write_point","write_scalar","write_scalar","write_scalar"],"q":[[0,"halo2_proofs"],[27,"halo2_proofs::arithmetic"],[74,"halo2_proofs::circuit"],[341,"halo2_proofs::circuit::floor_planner"],[377,"halo2_proofs::circuit::layouter"],[445,"halo2_proofs::dev"],[609,"halo2_proofs::dev::FailureLocation"],[612,"halo2_proofs::dev::VerifyFailure"],[634,"halo2_proofs::dev::cost"],[679,"halo2_proofs::dev::cost_model"],[823,"halo2_proofs::dev::metadata"],[938,"halo2_proofs::plonk"],[1663,"halo2_proofs::plonk::Error"],[1664,"halo2_proofs::plonk::permutation"],[1721,"halo2_proofs::poly"],[1946,"halo2_proofs::poly::commitment"],[2013,"halo2_proofs::poly::ipa"],[2017,"halo2_proofs::poly::ipa::commitment"],[2064,"halo2_proofs::poly::ipa::msm"],[2094,"halo2_proofs::poly::ipa::multiopen"],[2126,"halo2_proofs::poly::ipa::strategy"],[2199,"halo2_proofs::poly::kzg"],[2203,"halo2_proofs::poly::kzg::commitment"],[2254,"halo2_proofs::poly::kzg::msm"],[2303,"halo2_proofs::poly::kzg::multiopen"],[2368,"halo2_proofs::poly::kzg::strategy"],[2428,"halo2_proofs::transcript"],[2582,"core::fmt"],[2583,"core::fmt"],[2584,"core::any"],[2585,"pasta_curves::arithmetic::curves"],[2586,"subtle"],[2587,"ff"],[2588,"core::cmp"],[2589,"core::ops::arith"],[2590,"alloc::vec"],[2591,"core::ops::function"],[2592,"alloc::boxed"],[2593,"subtle"],[2594,"core::marker"],[2595,"core::marker"],[2596,"core::convert"],[2597,"rand_core"],[2598,"core::ops::arith"],[2599,"core::convert"],[2600,"core::iter::traits::collect"],[2601,"core::ops::arith"],[2602,"core::hash"],[2603,"ff"],[2604,"core::cmp"],[2605,"plotters::drawing::area"],[2606,"plotters::drawing::area"],[2607,"core::ops::range"],[2608,"group::prime"],[2609,"serde::de"],[2610,"serde::ser"],[2611,"std::collections::hash::map"],[2612,"core::default"],[2613,"std::io::error"],[2614,"std::io::error"],[2615,"core::error"],[2616,"std::io"],[2617,"core::ops::range"],[2618,"halo2curves::pairing"]],"d":["Curve elements are serialized in compressed form. Field …","Curve elements are serialized in uncompressed form. Field …","Serialization is the same as <code>RawBytes</code>, but no checks are …","This enum specifies how various types are serialized and …","This module provides common utilities, traits and …","","","Traits and structs for implementing circuit components.","","","","","Tools for developing circuits.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","This module provides an implementation of a variant of …","Contains utilities for performing arithmetic over …","","This module contains utilities and traits for dealing with …","","","","","The affine version of the curve","The base field over which this elliptic curve is …","The base field over which this elliptic curve is …","CURVE_ID used for hash-to-curve.","This trait is the affine counterpart to <code>Curve</code> and is used …","This trait is a common interface for dealing with elements …","The projective form of the curve","This represents an element of a group with basic …","This trait represents an element of a field.","The one element of the field, the multiplicative identity.","The scalar field of this elliptic curve.","The scalar field of this elliptic curve.","The zero element of the field, the additive identity.","Returns the curve constant a.","Returns the curve constant $a$.","Returns the curve constant b.","Returns the curve constant $b$.","Performs a radix-$2$ Fast-Fourier Transformation (FFT) on …","Performs a multi-exponentiation operation.","This computes the inner product of two vectors <code>a</code> and <code>b</code>.","Gets the coordinates of this point.","Cubes this element.","Doubles this element.","Apply the curve endomorphism by multiplying the …","This evaluates a provided polynomial (in coefficient form) …","Obtains a point given $(x, y)$, failing if it is not on the","Convert coefficient bases group elements to lagrange basis …","Requests a hasher that accepts messages and returns …","Computes the multiplicative inverse of this element, …","Returns whether or not this element is on the curve; should","Returns whether or not this element is on the curve; should","Returns true iff this element is zero.","Returns true iff this element is zero.","Return the Jacobian coordinates of this point.","Divides polynomial <code>a</code> in <code>X</code> by <code>X - b</code> with no remainder.","Returns coefficients of an n - 1 degree polynomial given a …","Obtains a point given Jacobian coordinates $X : Y : Z$, …","This utility function will parallelize an operation that …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Returns an element chosen uniformly at random using a …","This perform recursive butterfly arithmetic","Performs a small multi-exponentiation operation. Uses the …","Returns the square root of the field element, if it is …","Equivalent to <code>Self::sqrt_ratio(self, one())</code>.","Computes:","Squares this element.","An assigned cell.","A pointer to a cell within a circuit.","A chip implements a set of instructions that can be used …","A type that holds the configuration for this chip, and any …","A layout strategy within a circuit. The layouter is …","A type that holds any general chip state that needs to be …","This is a “namespaced” layouter which borrows a …","A region of the circuit in which a <code>Chip</code> can assign cells.","Index of a region in a layouter","Starting row of a region in a layouter","Represents the type of the “root” of this layouter, so …","A simple <code>FloorPlanner</code> that performs minimal optimizations.","A table layouter that can be used to assign values to a …","A lookup table in the circuit.","Helper trait for implementing a custom <code>Layouter</code>.","A value that might exist within a circuit.","","","","","","","","","","","Returns <code>Value::unknown()</code> if the value is <code>Value::unknown()</code>, …","Converts from <code>&amp;mut Value&lt;V&gt;</code> to <code>Value&lt;&amp;mut V&gt;</code>.","Converts from <code>&amp;Value&lt;V&gt;</code> to <code>Value&lt;&amp;V&gt;</code>.","Enforces an assertion on the contained value, if known.","Assign an advice column value (witness).","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","Assign the value of the instance column’s cell at …","Assigns a fixed value to a table cell.","","Assigns a fixed value to a table cell.","Assign a fixed value.","Assign a region of gates to an absolute row number.","","Assign a table region to an absolute row number.","","","","","","","","","","","","","","","","","","","","","","Returns the cell.","","","","","","","","","","","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents …","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents of …","The column of this cell.","The chip holds its own configuration.","Constrains a cell to have a constant value.","Constrains two cells to have the same value.","Constrains a <code>Cell</code> to equal an instance column’s row …","","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents …","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents of …","Copies the value to a given advice cell and constrains …","Cubes this field element.","","maps from a fixed column to a pair (default value, vector …","","","","","","","","","","","","","","","","","","","","","","","Doubles this field element.","","","","","","","","","","","","","Checks the contained value for an error condition, if …","Evaluates this value directly, performing an unbatched …","Evaluates this assigned cell’s value directly, …","Implementations of common circuit floor planners.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is …","Queries the value of the given challenge.","","Gets the “root” of this assignment, bypassing the …","","","","","","","","","","","","Returns the value of the instance column’s cell at …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the field element corresponding to this value.","Inverts this assigned value (taking the inverse of zero to …","Constructs a known value.","Implementations of common circuit layouters.","Provides access to general chip state loaded at the …","Maps a <code>Value&lt;V&gt;</code> to <code>Value&lt;W&gt;</code> by applying a function to the …","","","","","","","","","","","Allows the circuit implementor to name/annotate a Column …","Enters into a namespace.","","Returns a new SimpleTableLayouter","Exits out of the existing namespace.","","Creates a new (sub)namespace and enters into it.","","Identifies the region in which this cell resides.","The relative offset of this cell within its region.","Squares this field element.","","","","","","","","","","","","Returns the field element corresponding to this value.","","","","","","Transposes a <code>Value&lt;[V; LEN]&gt;</code> into a <code>[Value&lt;V&gt;; LEN]</code>.","Transposes a <code>Value&lt;impl IntoIterator&lt;Item = V&gt;&gt;</code> into a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs an unwitnessed value.","Unzips a value containing a tuple of two values.","Returns the value of the <code>AssignedCell</code>.","Returns the field element value of the <code>AssignedCell</code>.","","","","","","","","","","","Zips <code>self</code> with another <code>Value</code>.","The version 1 <code>FloorPlanner</code> provided by <code>halo2</code>.","A single pass of the <code>V1</code> layouter.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Concrete column","The virtual column involved in a region. This includes …","Helper trait for implementing a custom <code>Layouter</code>.","The shape of a region. For a region at a certain index, we …","Virtual column representing a (boolean) selector","Intermediate trait requirements for <code>RegionLayouter</code> when …","Helper trait for implementing a custom <code>Layouter</code>.","Assign an advice column value (witness)","","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","","Assign the value of the instance column’s cell at …","","Assigns a fixed value to a table cell.","Assigns a fixed value","","","","","","","","","","","Get a reference to the set of <code>columns</code> used in a <code>RegionShape</code>…","Constrains a cell to have a constant value.","","Constraint two cells to have the same value.","","","","","","","","Enables a selector at the given offset.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the value of the instance column’s cell at …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Allows the circuit implementor to name/annotate a Column …","","Create a new <code>RegionShape</code> for a region at <code>region_index</code>.","","Get the <code>region_index</code> of a <code>RegionShape</code>.","Get the <code>row_count</code> of a <code>RegionShape</code>.","","","","","","","","","","","A cell that has been assigned a value.","A cell used in an active gate was not assigned to.","The value of a particular cell within the circuit.","","A struct for collecting and displaying the gates within a …","Graphical renderer for circuit layouts.","A constraint was not satisfied for a particular row.","A constraint was active on an unusable row, and is likely …","The location within the circuit at which a particular …","A location inside a region.","An instance cell used in an active gate was not assigned …","A lookup input did not exist in its corresponding table.","A test prover for debugging circuits.","A location outside of a region.","A permutation did not preserve the original value of a …","A unique poisoned cell.","A shuffle input did not exist in its corresponding map.","A helper type that augments a <code>FloorPlanner</code> with <code>tracing</code> …","An unassigned cell.","The reasons why a particular circuit is not satisfied.","Return the content of an advice column as assigned by the …","","Panics if the circuit being checked by this <code>MockProver</code> is …","Panics if the circuit being checked by this <code>MockProver</code> is …","Panics if the circuit being checked by this <code>MockProver</code> is …","","","","","","","","","","","","","","","","","Builds a dot graph string representing the given circuit.","","","","","Collects the gates from within the circuit.","","Developer tools for investigating the cost of a circuit.","The cost estimator takes high-level parameters for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the list of Fixed Columns used within a MockProver …","Return the content of a fixed column as assigned by the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Marks cells involved in equality constraints, in red.","Metadata about circuits.","Returns the permutation argument (<code>Assembly</code>) used within a …","","","Prints the queries in this circuit to a CSV grid.","","Renders the given circuit on the given drawing area.","Runs a synthetic keygen-and-prove operation on the given …","Draws red lines between equality-constrained cells.","Sets the visibility of region labels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","Sets the view height for this layout, as a number of rows.","Sets the view width for this layout, as a number of …","","","","","","","","The offset (relative to the start of the region) at which …","The region in which the failure occurred.","The circuit row on which the failure occurred.","The values of the virtual cells used by this constraint.","The column in which this cell should be assigned.","The column in which this cell should be assigned.","The column in which this permutation is not satisfied.","The polynomial constraint that is not satisfied.","The polynomial constraint that is not satisfied.","The index of the active gate.","The index of the active gate.","The offset (relative to the start of the region) at which …","The offset (relative to the start of the region) at which …","The location at which this constraint is not satisfied.","The location at which the lookup is not satisfied.","The location at which the lookup is not satisfied.","The location at which the permutation is not satisfied.","The index of the lookup that is not satisfied. These …","The name of the lookup that is not satisfied.","The name of the lookup that is not satisfied.","The offset (relative to the start of the region) at which …","The region in which this cell should be assigned.","The region in which this gate was activated.","The absolute row at which this cell should be assigned.","The index of the lookup that is not satisfied. These …","Measures a circuit to determine its costs, and explain …","The marginal size of a Halo 2 proof, broken down into its …","The size of a Halo 2 proof, broken down into its …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the marginal proof size per instance of this …","Measures a circuit with parameter constant <code>k</code>.","Returns the proof size for the given number of instances …","","","","","","","","","","","","","Supported commitment schemes","Options to build a circuit specification to measure the …","Inner Product Argument commitment scheme","KZG with GWC19 mutli-open strategy","KZG with BDFG20 mutli-open strategy","Structure holding the Lookup related data for circuit …","High-level specifications of an abstract circuit.","Number of permutation enabled columns","Structure holding polynomial related data for benchmarks","Structure holding the Shuffle related data for circuit …","An advice column with the given rotations. May be repeated.","Number of advice columns.","","","","","","","","","","","","","","","","","","","","","","","","Number of distinct column queries across all gates.","","","","","","","","","","","","","","","","","","","","","","","","","","A fixed column with the given rotations. May be repeated.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Given a Plonk circuit, this function returns CostOptions","Given a Plonk circuit, this function returns a ModelCircuit","","Maximum degree of the custom gates.","","","","","","","","An instance column with the given rotations. May be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert CostOptions to ModelCircuit. The proof sizè is …","2^K bound on the number of rows.","Power-of-2 bound on the number of rows in the circuit.","A lookup over N columns with max input degree I and max …","Number of lookup arguments.","Maximum degree of the circuit.","Maximum degree of the constraint system.","","A permutation over N columns. May be repeated.","Equality constraint enabled columns.","Number of distinct sets of points in the multiopening …","Rotations for the given polynomial","","","A shuffle over N columns with max input degree I and max …","Number of shuffle arguments","Size of the proof for the circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about a column within a circuit.","Metadata about a configured constraint within a circuit.","Metadata about a configured gate within a circuit.","Metadata about an assigned region within a circuit.","A “virtual cell” is a PLONK cell that has been queried …","","","","","","","","","","","","","","","","","","","","","Return the column type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Return the column index.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An advice column","An Advice variant","This is an advice (witness) column queried at a certain …","Query of advice column at a certain relative location","An enum over the Advice, Fixed, Instance structs","A value assigned to a cell within a circuit.","This trait allows a <code>Circuit</code> to direct some backend to …","A verifier that checks multiple proofs in a batch. <strong>This </strong>…","Out of bounds index passed to a backend","A challenge squeezed from transcript after advice columns …","This is a challenge","This is a trait that circuits provide implementations for …","A column with an index and type","A <code>TableColumn</code> has not been assigned.","The instance sets up a copy constraint involving a column …","A column type","This is a configuration object that stores things like …","This is a constant polynomial","An individual polynomial constraint.","This is a description of the circuit environment, such as …","The constraint system is not satisfied.","A set of polynomial constraints with a common selector.","This is an error that could occur during proving or …","Low-degree expression representing an identity that must …","First phase","A fixed column","A Fixed variant","This is a fixed column queried at a certain relative …","Query of fixed column at a certain relative location","A floor planning strategy for a circuit.","The floor planner used for this circuit. This is an …","Gate","An instance column","An Instance variant","This is an instance (external) column queried at a certain …","Query of instance column at a certain relative location","Instance provided exceeds number of available rows","The provided instances do not match the circuit parameters.","This is a negated polynomial","Circuit synthesis requires global constants, but circuit …","<code>k</code> is too small for the given circuit.","Opening error","Attempt to overwrite a default value","Optional circuit configuration parameters. Requires the …","Phase of advice column","Represents the minimal parameters that determine a …","Minimal representation of a verification key that can be …","This is the product of two polynomials","This is a proving key which allows for the creation of …","A value stored as a fraction to enable batch inversion.","This is a scaled polynomial","Second phase","A selector, representing a fixed boolean value per row of …","This is a virtual selector","This is the sum of two polynomials","This is an error that can occur during synthesis of the …","A fixed column of a lookup table.","This is an error that could occur during table synthesis.","An error relating to a lookup table.","Third phase","Transcript error","A value that does not require inversion to evaluate.","A Table has columns of uneven lengths.","Attempt to assign a used <code>TableColumn</code>","This is a verifying key which allows for the verification …","A “virtual cell” is a PLONK cell that has been queried …","Exposes the “virtual cells” that can be queried while …","The field element zero.","","","","","","","","","","Adds a proof to the batch.","Returns Advice variant in <code>FirstPhase</code>","Allocate a new advice column at <code>FirstPhase</code>","Allocate a new advice column in given phase","Returns phase of advice columns","Returns Advice variant in given <code>Phase</code>","Returns advice queries","Allows the developer to include an annotation for an …","Annotate an Instance column.","Annotate a Lookup column.","Assign an advice column value (witness)","Assign a fixed value","Compute the number of blinding factors necessary to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns phase of challenges","Requests a challenge that is usable after the given phase.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Column index","Column index","Column index","Type of this column.","Allocate a new complex selector that can appear anywhere …","Approximate the computational complexity of this …","This will compress selectors together depending on their …","The circuit is given an opportunity to describe the exact …","The circuit is given an opportunity to describe the exact …","The circuit is given an opportunity to describe the exact …","Returns constants","Returns the name of the constraint at index …","Assign two cells to have the same value","Creates a new gate.","This creates a proof for the provided <code>circuit</code> when given …","Returns <code>ConstraintSystem</code>","Cubes this element.","Return expression from column at the current row","","","","Compute the degree of this polynomial","Compute the degree of the constraint system (the maximum …","Returns the denominator, if non-trivial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Does not combine selectors and directly replaces them …","Doubles this element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable this selector at the given offset within the given …","Enables this fixed column to be used for global constant …","Enable the ability to enforce equality over cells in this …","Enables a selector at the given row.","Creates a new region and enters into it.","","","","","","","","","","","","","","Evaluates this assigned value directly, performing an …","Evaluate the polynomial using the provided closures to …","Evaluate the polynomial lazily using the provided closures …","Exits the current region.","Return expression from selector","Return Expression","Fills a fixed <code>column</code> starting from the given <code>row</code> with …","Finalizes the batch and checks its validity.","Allocate a new fixed column","Returns commitments of fixed polynomials","Returns fixed queries","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads a verification key from a slice of bytes using …","Reads a proving key from a slice of bytes using <code>Self::read</code>.","Returns gates","Returns general column annotations","Queries the value of the given challenge.","Get the underlying <code>EvaluationDomain</code>.","Get the underlying <code>VerifyingKey</code>.","","","","","","","","","Hashes a verification key into a transcript.","Identifier for this expression. Expressions with identical …","Index of this column.","Returns index of this selector","Index of this challenge.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns inner column","Allocate a new instance column","Returns instance queries","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Inverts this assigned value (taking the inverse of zero to …","Is this selector “simple”? Simple selectors can only …","Returns true iff this element is zero.","Generate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>. By …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.","Add a lookup argument for some input expressions and table …","Add a lookup argument for some input expressions and table …","Allocates a new fixed column that can be used in a lookup …","Returns lookup arguments","Returns the minimum necessary rows that need to exist in …","","","","","","","","","Returns the gate name.","","","","Returns <code>Advice</code> in given <code>Phase</code>","Constructs a new batch verifier.","Return expression from column at the next row","Returns number of advice columns","Returns number of challenges","Returns number of fixed columns","Returns number of instance columns","Returns number of selectors","Returns the numerator.","Returns a reference to the parameters that should be used …","Returns a reference to the parameters that should be used …","","","","Implementation of permutation argument.","Returns permutation argument","Returns <code>VerifyingKey</code> of permutation","Phase of this column","Phase of this advice column","Phase of this challenge.","Obtain a pinned version of this constraint system; a …","Obtains a pinned representation of this verification key …","Returns constraints of this gate","Exits out of the existing namespace.","Return expression from column at the previous row","","Creates a new (sub)namespace and enters into it.","Query an advice column at a relative position","Query an Any column at a relative position","Return expression from cell","Return expression from column at a relative position","","","","","Make side effects","Query a challenge","Query a fixed column at a relative position","Queries the cell of an instance column at a particular …","Query an instance column at a relative position","Query a selector at the current position.","Reads a verification key from a buffer.","Reads a proving key from a buffer. Does so by reading …","Return expression from column at the specified rotation","Rotation of this query","Rotation of this query","Rotation of this query","Allocate a new (simple) selector. Simple selectors cannot …","Sets the minimum degree required by the circuit, which can …","Add a shuffle argument for some input expressions and …","Returns shuffle arguments","","Squares this element.","Square this expression.","","","","","","","","","","","Given the provided <code>cs</code>, synthesize the given circuit.","Given the provided <code>cs</code>, synthesize the circuit. The …","Writes a verifying key to a vector of bytes using …","Writes a proving key to a vector of bytes using <code>Self::write</code>…","","","","","","","","","","","","","","","","","","","","","Returns representative of this <code>VerifyingKey</code> in transcripts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a new unblinded advice column at <code>FirstPhase</code>","Allocate a new unblinded advice column in given phase. …","Returns a boolean indicating whether or not the proof is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a set of constraints that are controlled by the …","Returns a copy of this circuit with no witness values …","Writes a verifying key to a buffer.","Writes a proving key to a buffer.","The current value of <code>k</code> being used.","A permutation argument.","Struct that accumulates all the necessary data in order to …","The verifying key for a single permutation argument.","","","","","","","Builds the ordered mapping of the cycles. This will only …","","","","","","","Returns columns that participate in the permutation …","Returns commitments of sigma polynomials","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns columns that participate on the permutation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns mappings of the copies.","","","","","","","","","","","","","","","","The basis over which a polynomial is described.","The polynomial is defined as coefficients","This is an error that could occur during proving or …","This structure contains precomputed constants and other …","The polynomial is defined as coefficients of Lagrange …","Guards is unfinished verification result. Implement this …","The polynomial is defined as coefficients of Lagrange …","Multi scalar engine which is not evaluated yet.","OpeningProof is not well-formed","The output type of this verification strategy after …","Represents the minimal parameters that determine an …","Represents a univariate polynomial defined over a field …","A polynomial query at a point","Describes the relative rotation of a vector. Negative …","Caller needs to re-sample a point","Trait representing a strategy for verifying Halo 2 proofs.","A polynomial query at a point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtains a polynomial in coefficient form when given a …","This takes us from an n-length coefficient vector into a …","Generic commitment scheme structures","Returns a constant polynomial in the extended Lagrange …","Returns a constant polynomial in the Lagrange coefficient …","The current location in the evaluation domain","","","","","","","","","","","","","","","","","","","","","","","This divides the polynomial (in the extended domain) by …","","","","","","","","","","","Returns an empty (zero) polynomial in the coefficient basis","Returns an empty (zero) polynomial in the extended …","Returns an empty (zero) polynomial in the Lagrange …","Returns an empty (zero) polynomial in the Lagrange …","","Get the size of the extended domain","Get the size of the extended domain","This takes us from the extended evaluation domain and gets …","Finalizes the batch and checks its validity.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the generator of the extended domain’s …","Get $\\\\omega$, the generator of the $2^k$ order …","Get $\\\\omega^{-1}$, the inverse of the generator of the …","Gets the quotient polynomial’s degree (as a multiple of …","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inner product argument commitment scheme","Iterate over the values, which are either in coefficient …","Iterate over the values mutably, which are either in …","Get the size of the domain","KZG commitment scheme","Computes evaluations (at the point <code>x</code>, where <code>xn = x^n</code>) of …","Obtains a polynomial in Lagrange form when given a vector …","This takes us from an n-length vector into the coefficient …","","Creates new verification strategy instance","This constructs a new evaluation domain object based on …","Create a new prover query based on a polynomial","Create a new verifier query based on a commitment","Create a new verifier query based on a commitment","Create a new verifier query based on a linear combination …","The next location in the evaluation domain","Gets the size of this polynomial in terms of the number of …","Obtain a pinned version of this evaluation domain; a …","The previous location in the evaluation domain","Obtains an MSM from the verifier strategy and yields back …","Rotates the values in a Lagrange basis polynomial by …","Rotate the extended domain polynomial over the original …","Multiplies a value by some power of $\\\\omega$, essentially …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type around a blinding factor.","Defines components of a commitment scheme.","Elliptic curve used to commit the application and witnesses","Unfinalized verification result. This is returned in …","Multi scalar multiplication engine","Multi scalar multiplication engine","Accumulator fot comressed verification","Parameters for circuit sysnthesis and prover parameters.","Parameters for circuit sysnthesis and prover parameters.","Constant prover parameters","Verifier specific functionality with circuit constraints","Constant verifier parameters","Constant verifier parameters.","Common multi-open prover interface for various commitment …","Query instance or not","Query instance or not","Application field of this commitment scheme","Common multi-open verifier interface for various …","","","","Add another multiexp into this one","Add arbitrary term (the scalar and the point)","Return base points","","","Perform multiexp and check that it results in zero","","","This computes a commitment to a polynomial described by …","This commits to a polynomial using its evaluations over …","Create a multi-opening proof","","","","Downsize <code>Params</code> with smaller <code>k</code>.","","Generates an empty multiscalar multiplication struct using …","","Perform multiexp and return the result","","Returns the argument unchanged.","Getter for g generators","","Calls <code>U::from(self)</code>.","Logaritmic size of the circuit","","","","Size of the circuit","Returns new instance of parameters","Creates new prover instance","Creates new verifier instance","Given <code>rng</code> creates new blinding scalar","Wrapper for parameter generator","Reads params from a buffer.","Wrapper for parameter reader","Scalars","Scale all scalars in the MSM by some scaling factor","","","","","Returns verification parameters.","Process the proof and returns unfinished result named <code>Guard</code>","","Writes params to a buffer.","This module contains an implementation of the polynomial …","Multiscalar multiplication engines","IPA multi-open scheme This module contains an optimisation …","Strategies used with KZG scheme","Concrete IPA commitment scheme","Public parameters for IPA commitment scheme","Verifier parameters","","","","","","","This computes a commitment to a polynomial described by …","This commits to a polynomial using its evaluations over …","Create a polynomial commitment opening proof for the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initializes parameters for the curve, given a random …","","Reads params from a buffer.","","","","","","","","","","Checks to see if the proof represented within <code>transcript</code> …","","","Writes params to a buffer.","A multiscalar multiplication in the polynomial commitment …","Add a value to the first entry of <code>g_scalars</code>.","Add another multiexp into this one","Add another multiexp into this one","Add a vector of scalars to <code>g_scalars</code>. This function will …","Add to <code>u_scalar</code>","Add to <code>w_scalar</code>","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Given verifier parameters Creates an empty multi scalar …","","","","","","","","IPA multi-open prover","IPA multi-open verifier","","","","","Create a multi-opening proof","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","An accumulator instance consisting of an evaluation claim …","A verifier that checks multiple proofs in a batch.","Wrapper for verification accumulator","A verifier that checks single proof","","","","","","","","","","","","","Computes G = ⟨s, params.g⟩","","","","","","","","","","","","","Finalizes the batch and checks its validity.","Finalizes the batch and checks its validity.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The claimed output of the linear-time polycommit opening …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A vector of challenges u_0, …, u_{k - 1} sampled by the …","Lets caller supply the challenges and obtain an MSM with …","Lets caller supply the purported G point and simply appends","","","","","KZG commitment scheme","Multiscalar multiplication engines","KZG multi-open scheme","Strategies used with KZG scheme","Umbrella commitment scheme construction for all KZG …","These are the public parameters for the polynomial …","KZG multi-open verification parameters","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initializes parameters for the curve through existing …","Returns gernerator on G2","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Reads params from a buffer.","Reads params from a buffer.","","Returns first power of secret on G2","Initializes parameters for the curve, draws toxic secret …","","","","","","","","","","","Writes params to a buffer.","Writes parameters to buffer","Two channel MSM accumulator","A multiscalar multiplication in the polynomial commitment …","","Add another multiexp into this one","","","","","","","","Performs final pairing check with given verifier params …","","","","","Prepares all scalars in the MSM to linear combination","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an empty MSM instance","Create a new two channel MSM accumulator instance","","","Scale all scalars in the MSM by some scaling factor","","","","","","","","","","","Concrete KZG prover with GWC variant","Concrete KZG prover with SHPLONK variant","Concrete KZG verifier with GWC variant","Concrete KZG multiopen verifier with SHPLONK variant","","","","","","","","","Create a multi-opening proof","Create a multi-opening proof","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Given parameters creates new prover instance","","","","","","","","","","","","","","","","Verify a multi-opening proof","","","","","A verifier that checks multiple proofs in a batch","Wrapper for linear verification accumulator","A verifier that checks a single proof","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs an empty batch verifier","","Constructs an empty batch verifier","","","","","","","","","","","","","","","","","","","Constructs and initialized new batch verifier","We will replace BLAKE2b with an algebraic hash function in …","We will replace BLAKE2b with an algebraic hash function in …","A 255-bit challenge.","The scalar representation of a verifier challenge.","<code>EncodedChallenge&lt;C&gt;</code> defines a challenge encoding with a …","The Input type used to derive the challenge encoding. For …","Keccak256 hash function reader for EVM compatibility","Keccak256 hash function writer for EVM compatibility","Generic transcript view (from either the prover or verifier…","Transcript view from the perspective of a verifier that …","Initializes transcript at verifier side.","Transcript view from the perspective of a prover that has …","Manages beginning and finishing of transcript pipeline.","Cast an encoded challenge as a typed <code>ChallengeScalar</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Writing the point to the transcript without writing it to …","","","","","Writing the scalar to the transcript without writing it to …","","","","","","","","","","","","","","","","","","","","","","","","","Conclude the interaction and return the output buffer …","","Conclude the interaction and return the output buffer …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a scalar field element from an encoded challenge.","","Initialize a transcript given an input buffer.","Initialize a transcript given an output buffer.","","Initialize a transcript given an input buffer.","","Initialize a transcript given an input buffer.","","Initialize a transcript given an output buffer.","","Initialize a transcript given an output buffer.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get an encoded challenge from a given input challenge.","","Read a curve point from the prover.","","","Read a curve scalar from the prover.","","","Squeeze an encoded verifier challenge from the transcript.","","","","","Squeeze a typed challenge (in the scalar field) from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write a curve point to the proof and the transcript.","","","Write a scalar to the proof and the transcript.","",""],"i":[1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,21,21,12,21,0,0,12,0,0,10,21,12,10,21,12,21,12,0,0,0,12,10,10,21,0,12,0,21,10,21,12,10,10,21,0,0,21,0,10,10,10,0,0,10,10,10,10,0,0,0,66,0,66,0,0,0,0,59,0,0,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43,43,43,52,54,56,43,59,60,59,60,54,40,70,62,63,61,46,43,56,60,54,40,70,62,63,61,46,43,56,60,46,40,62,63,61,46,40,62,63,61,46,40,40,61,66,43,43,59,60,40,40,46,40,40,54,54,40,70,62,62,63,63,61,46,43,56,60,54,40,70,62,63,61,46,43,56,60,40,54,40,70,62,63,61,46,43,56,60,60,63,40,40,46,0,54,40,70,62,63,61,46,43,56,60,54,40,40,70,62,62,63,63,61,46,43,43,56,56,60,40,59,60,59,60,54,40,70,62,63,61,46,43,56,60,43,54,40,70,62,63,61,46,43,56,60,40,40,40,0,66,40,40,40,40,40,40,40,40,40,40,40,43,59,40,54,59,60,59,60,61,61,40,40,40,40,40,40,40,40,40,40,40,70,40,40,62,63,61,46,40,40,54,40,70,62,63,61,46,43,56,60,54,40,70,62,63,61,46,43,56,60,54,40,70,62,63,61,46,43,56,60,40,40,46,46,54,40,70,62,63,61,46,43,56,60,40,0,0,81,81,82,81,82,81,81,82,81,82,81,82,81,82,81,82,81,81,81,82,81,82,81,81,81,82,82,81,82,81,82,81,82,81,84,0,0,0,84,0,0,71,83,71,83,71,83,52,71,83,83,84,83,84,83,84,83,84,84,83,71,83,71,83,83,84,83,84,83,84,71,83,84,83,84,83,84,84,84,84,83,84,71,83,83,84,71,83,83,84,83,83,83,84,83,84,83,84,83,84,83,84,90,96,0,0,0,0,96,96,0,93,96,96,0,93,96,90,96,0,90,0,89,89,89,89,89,89,89,93,96,94,99,95,90,89,93,96,94,99,95,90,89,0,93,90,93,90,94,89,0,0,95,93,96,94,99,95,90,89,93,96,94,99,95,90,89,93,96,94,99,95,90,89,89,89,93,96,90,89,89,89,89,93,93,96,96,94,94,99,95,90,89,93,96,94,99,95,90,89,89,93,96,94,99,95,90,89,93,96,94,99,95,90,89,95,0,89,89,89,94,89,95,89,95,95,99,93,90,93,96,94,93,96,94,99,95,90,89,93,96,94,99,95,90,89,93,96,94,99,95,90,89,89,89,89,89,95,95,93,96,94,99,95,90,89,224,224,225,226,227,228,229,226,230,227,228,227,228,226,231,232,229,231,231,232,227,227,228,228,232,0,0,0,107,109,110,107,109,110,107,109,110,107,109,110,107,109,110,107,109,110,107,109,110,107,109,110,107,109,110,107,107,107,107,109,110,107,109,110,107,109,110,107,109,110,0,0,117,117,117,0,0,0,0,0,118,116,117,118,111,112,113,114,116,117,118,111,112,113,114,116,111,112,113,114,111,112,113,114,111,116,117,118,111,112,113,114,116,117,118,111,112,113,114,116,113,116,117,118,111,112,113,114,116,117,111,118,117,118,111,112,113,114,116,117,118,111,112,113,114,116,0,0,111,118,117,118,111,112,113,114,116,118,117,118,111,112,113,114,116,118,118,116,118,116,116,118,111,118,116,116,111,113,116,118,116,116,111,112,113,114,117,118,111,112,113,114,116,117,118,111,112,113,114,116,117,118,111,112,113,114,116,117,118,111,112,113,114,116,0,0,0,0,0,120,124,121,122,123,120,124,121,122,123,120,121,122,123,120,121,122,123,120,124,120,120,124,121,122,123,120,124,121,122,123,120,124,121,122,123,120,124,121,122,123,120,120,124,124,121,121,122,122,123,123,120,120,120,124,124,124,124,121,121,122,122,123,123,123,123,123,120,120,120,124,121,122,123,120,124,121,122,123,120,124,120,121,122,123,120,124,121,122,123,120,124,121,122,123,120,124,121,122,123,120,124,121,122,123,120,124,121,122,123,0,74,128,0,0,0,0,0,47,0,128,0,0,152,47,0,79,128,0,0,47,0,0,0,0,0,74,128,0,0,79,0,0,74,128,0,47,47,128,47,47,47,152,79,0,0,0,128,0,39,128,0,0,128,128,47,0,0,47,0,47,39,152,152,0,0,0,39,39,39,39,39,39,39,128,39,39,129,74,131,131,131,74,131,55,131,131,55,55,131,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,131,131,39,45,44,57,51,74,87,135,136,137,53,73,128,126,138,131,139,140,39,45,44,57,51,74,87,135,136,137,53,73,128,126,138,131,139,140,45,74,53,135,136,137,45,131,128,131,79,79,79,131,138,55,131,0,139,39,45,44,131,129,128,131,39,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,131,39,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,87,131,131,55,55,39,45,44,57,51,74,87,135,136,137,53,73,128,39,128,128,55,87,73,55,129,131,139,131,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,47,152,152,129,139,153,140,147,39,39,39,39,39,45,45,45,45,148,149,150,44,57,51,74,74,74,74,87,135,136,137,53,73,128,126,126,141,141,141,151,138,131,142,47,47,152,129,139,153,140,139,140,131,131,55,139,140,45,44,57,51,74,87,53,73,139,128,45,87,73,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,53,131,131,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,151,39,87,39,0,0,0,131,131,131,131,131,39,39,39,39,128,128,39,39,138,39,39,128,44,129,45,131,131,131,131,131,39,79,79,45,74,53,0,131,139,44,136,73,131,139,138,55,45,128,55,142,142,134,45,44,57,51,74,128,142,142,55,142,142,139,140,45,135,136,137,131,131,131,131,47,39,128,39,39,39,39,39,39,128,39,39,128,100,79,139,140,39,45,44,57,51,74,87,135,136,137,53,73,128,126,138,131,139,140,47,152,139,147,39,45,45,45,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,131,131,0,147,39,45,148,149,150,44,57,51,74,87,135,136,137,53,73,128,126,141,151,138,131,142,47,152,129,139,153,140,151,79,139,140,233,0,0,0,101,162,163,101,162,163,101,101,162,163,101,162,163,101,163,101,162,163,101,162,163,101,162,163,101,101,162,163,101,162,163,162,101,162,163,101,162,163,101,101,162,163,101,162,163,101,162,163,101,162,163,101,162,163,0,0,0,0,0,0,0,192,181,168,0,0,0,0,181,0,0,172,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,156,174,175,177,178,179,172,133,156,174,175,177,178,179,172,133,156,156,0,156,156,133,156,180,174,175,181,177,178,179,172,172,133,156,180,174,175,181,177,178,179,172,172,133,156,156,180,174,175,181,177,178,179,172,133,156,156,156,156,133,156,156,156,168,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,156,156,156,156,172,172,172,172,172,172,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,0,172,172,156,0,156,156,156,172,168,156,174,175,175,175,133,172,156,133,168,172,156,156,172,172,156,174,175,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,156,180,174,175,181,177,178,179,172,133,0,0,166,167,0,159,167,0,0,166,0,166,186,0,189,167,166,0,184,184,184,176,176,176,184,184,176,184,184,186,159,189,184,184,184,159,184,159,184,176,184,184,186,184,184,159,184,184,184,159,186,189,167,184,166,159,166,176,176,184,184,184,184,186,167,184,159,0,0,0,0,0,0,0,193,195,193,195,193,193,193,193,0,193,195,193,195,193,193,195,193,193,195,193,195,193,193,195,193,195,193,193,193,195,193,195,193,193,195,193,195,193,195,193,0,193,195,193,0,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,0,0,197,198,197,198,197,197,198,197,198,197,198,197,198,197,198,197,198,197,198,197,198,197,198,197,198,197,198,198,197,198,0,0,0,0,196,199,200,201,196,199,200,201,196,199,196,199,196,196,199,200,201,196,199,200,201,196,199,200,201,200,201,196,199,200,201,196,199,200,201,199,196,199,200,201,196,199,200,201,200,201,200,201,196,199,196,199,200,201,196,199,200,201,196,199,200,201,199,196,196,196,199,200,201,0,0,0,0,0,0,0,202,205,202,205,202,202,202,202,202,205,202,205,202,202,205,202,202,205,202,205,202,202,202,202,205,202,205,202,202,202,205,202,202,205,202,202,202,202,205,202,205,202,205,202,202,205,202,202,0,0,204,206,204,204,204,206,204,206,204,206,204,206,204,206,204,204,204,206,204,206,204,206,204,204,206,204,206,206,204,206,204,206,204,206,204,204,206,204,206,204,206,204,206,204,206,204,206,0,0,0,0,208,210,209,211,208,210,209,211,208,209,208,210,209,211,208,210,209,211,208,210,209,211,208,210,209,211,208,210,209,211,208,210,209,211,208,210,209,211,208,210,209,209,211,208,210,209,211,208,210,209,211,208,210,209,211,210,211,208,210,209,211,0,0,0,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,213,214,212,213,214,212,213,214,212,213,214,212,213,214,213,213,214,214,213,214,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,213,0,0,0,0,0,143,0,0,0,0,0,0,0,143,217,218,219,220,216,221,217,218,219,220,216,221,217,218,219,220,216,221,217,218,219,220,216,221,158,217,218,219,220,158,217,218,219,220,217,218,219,220,216,216,221,221,217,218,219,220,216,221,217,218,219,220,216,221,222,219,220,217,218,219,220,216,221,217,218,219,220,216,221,143,221,223,222,217,217,218,218,219,219,220,220,216,221,217,218,219,220,216,221,143,221,169,217,218,169,217,218,158,217,218,219,220,158,217,218,219,220,216,221,216,217,218,219,220,216,221,217,218,219,220,216,221,217,218,219,220,216,221,217,218,219,220,216,221,144,219,220,144,219,220],"f":"`````{ce{}{}}0`{bb}{{ce}d{}{}}{fc{}}0`{fd}{{bh}j}{cc{}}`{{}f}7``7`{c{{l{e}}}{}{}}0{cn{}}9`````````````{{}c{}}000{{{A`{e}}cAb}dAd{{Af{c}}}}{{A`{A`{c}}}{}Ah}{{{A`{c}}{A`{c}}}cAd}{{{Ah{}{{Aj{c}}{Al{e}}{An{g}}}}}{{Bb{{B`{{Ah{}{{Aj{c}}{Al{e}}{An{g}}}}}}}}}{BdBf}{BdBf}{{Bj{}{{Bh{{Ah{}{{Aj{c}}{Al{e}}{An{g}}}}}}{Aj{c}}}}}}{AdAd}0{{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}BdBd{{Ah{}{{An{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Aj{c}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}}}{Bn{c}}{Bn{c}}}}{{{A`{c}}c}cAd}{{cc}{{Bb{{Ah{}{{Aj{e}}{Al{c}}{An{g}}}}}}}{BdBf}{BdBf}{{Bj{}{{Bh{}}{Aj{}}}}}}{{C`Ab}{{C`{c}}}Ah}{Cb{{Cf{Cd}}}}{Ad{{Bb{Ad}}}}{{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}ChBdBd{{Ah{}{{An{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Aj{c}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}}}{Bn{c}}{Bn{c}}}}{{{Ah{}{{Aj{c}}{Al{e}}{An{g}}}}}Ch{BdBf}{BdBf}{{Bj{}{{Bh{{Ah{}{{Aj{c}}{Al{e}}{An{g}}}}}}{Aj{c}}}}}}{AdCh}{AdCj}{{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}{{Cl{eee}}}BdBd{{Ah{}{{An{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Aj{c}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}{Bl{{Bj{}{{Aj{c}}{Al{e}}{Bh{g}}}}}}}}{Bn{c}}{Bn{c}}}}{{ec}{{C`{c}}}Ad{{D`{}{{Cn{c}}}}}}{{{A`{c}}{A`{c}}}{{C`{c}}}Ad}{{ccc}{{Bb{{Bj{}{{Aj{e}}{Al{c}}{Bh{g}}}}}}}BdBd{{Ah{}{{An{}}{Aj{}}{Bl{}}{Bl{}}}}{Bn{e}}{Bn{e}}}}{{{A`{c}}e}dDb{{Cd{{A`{c}}f}}DbDdDf}}{{Adc}Ad{{Dj{{A`{Dh}}}}}}0{cAdDl}{{{A`{e}}ff{A`{c}}}dAd{{Af{c}}}}{{A`{A`{c}}}{}Ah}={Ad{{Cl{ChAd}}}}{{AdAd}{{Cl{ChAd}}}}{AdAd}````````````````{{{E`{{Dn{c}}}}{E`{c}}}eAd{}}{{{E`{c}}{E`{c}}}g{}{}{}}0{{{E`{{Dn{c}}}}c}eAd{}}{{{E`{c}}{E`{c}}}e{}{}}0031{{{E`{e}}{E`{e}}}g{}{{Eb{}{{Bl{c}}}}}{}}{{{E`{c}}g}{{E`{e}}}{}{}{{Ed{c}{{Bl{{E`{e}}}}}}}}{{{E`{c}}}{{E`{c}}}{}}0{{{E`{c}}e}d{}{{Ed{c}{{Bl{Cj}}}}}}{{{Ef{c}}g{Ej{Eh}}fk}{{l{{El{ic}}En}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}{}{{Fd{}{{Bl{{E`{i}}}}}}}}{{{Ef{c}}g{Ej{Eh}}fi}{{l{{El{ic}}En}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}{}}{{{Ef{c}}g{Ej{Ff}}f{Ej{Eh}}f}{{l{{El{cc}}En}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}}{{FhCdFjfFd}{{l{dEn}}}}{{{Fl{ce}}CdFjfFd}{{l{dEn}}}Ad{{Fn{c}}}}{{{G`{c}}gFjfk}{{l{dEn}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}{{Fb{{Dn{c}}}}}{{Fd{}{{Bl{{E`{i}}}}}}}}{{{Ef{c}}g{Ej{Gb}}fk}{{l{{El{ic}}En}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}{}{{Fd{}{{Bl{{E`{i}}}}}}}}{{{Gf{}{{Gd{c}}}}im}{{l{kEn}}}{{Gf{e}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{}{{Fd{{Ef{e}}}{{Bl{{l{kEn}}}}}}}}{{{Gh{ce}}im}{{l{kEn}}}Ad{{Gf{c}}}{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{}{{Fd{{Ef{c}}}{{Bl{{l{kEn}}}}}}}}{{{Gf{}{{Gd{c}}}}ik}{{l{dEn}}}{{Gf{e}}}Ad{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{{Fd{{G`{e}}}{{Bl{{l{dEn}}}}}}}}{{{Gh{ce}}ik}{{l{dEn}}}Ad{{Gf{c}}}{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{{Fd{{G`{c}}}{{Bl{{l{dEn}}}}}}}}{ce{}{}}0000000000000000000{{{El{ce}}}Gj{}Ad}{{{E`{c}}}{{E`{c}}}Df}{GlGl}{GnGn}{GjGj}{{{El{ce}}}{{El{ce}}}Df{DfAd}}{{ce}d{}{}}000055`{{{Hd{}{{H`{c}}{Hb{e}}}}}c{HfDf}{HfDf}}{{{Ef{c}}Gje}{{l{dEn}}}Ad{{Fb{{Dn{c}}}}}}{{{Ef{c}}GjGj}{{l{dEn}}}Ad}{{{Gf{}{{Gd{c}}}}Gj{Ej{Ff}}f}{{l{dEn}}}{{Gf{e}}}Ad}{{{Gh{ce}}Gj{Ej{Ff}}f}{{l{dEn}}}Ad{{Gf{c}}}}{{{E`{c}}}{{E`{c}}}Hh}0{{{El{ce}}i{Ef{e}}{Ej{Eh}}f}{{l{{El{ce}}En}}}DfAd{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}}{{{E`{e}}}{{E`{{Dn{c}}}}}Ad{{Hj{{Dn{c}}}}}}{{}{{E`{c}}}{}}`{fc{}}00{Glc{}}11{Gnc{}}2222222222222224{fd}000000000{{{Gh{ce}}}dAd{{Gf{c}}}}{{GnGn}Cj}{{{E`{c}}e}{{l{dEn}}}{}{{Ed{c}{{Bl{Cj}}}}}}{{{E`{{Dn{c}}}}}{{E`{c}}}Ad}{{{El{{Dn{c}}c}}}{{El{cc}}}Ad}`{{{Fl{ce}}h}jAd{{Fn{c}}}}{{{E`{c}}h}jHf}{{Hlh}j}{{Glh}j}{{Gnh}j}{{Gjh}j}{{{El{ce}}h}jHf{HfAd}}{{{Ef{c}}h}j{HfAd}}{{{G`{c}}h}j{HfAd}}{{{Gh{ce}}h}j{HfAd}{Hf{Gf{c}}}}{cc{}}0{{{E`{c}}}{{E`{{Dn{c}}}}}Ad}1{fGl}2{fGn}3333{Hn{{Ef{c}}}Ad}4{Fh{{G`{c}}}Ad}5{e{{E`{g}}}{}{{D`{}{{Cn{{E`{c}}}}}}}{{I`{c}}}}{{{Gf{}{{Gd{c}}}}Ib}{{E`{e}}}{{Gf{e}}}Ad}{{{Gh{ce}}Ib}{{E`{c}}}Ad{{Gf{c}}}}{{{Gf{}{{Gd{c}}}}}c{{Gf{e}}}Ad}{{{Gh{ce}}}gAd{{Gf{c}}}{}}{{}f}000000000{{{Ef{c}}{Ej{Ff}}f}{{l{{E`{c}}En}}}Ad}{ce{}{}}000000000{{{E`{e}}}{{E`{{Dn{c}}}}}Ad{{Fb{{Dn{c}}}}}}{{{E`{e}}}{{E`{{Dn{c}}}}}Ad{{Hj{{Dn{c}}}}}}{c{{E`{c}}}{}}`{{{Hd{}{{H`{c}}{Hb{e}}}}}e{HfDf}{HfDf}}{{{E`{c}}g}{{E`{e}}}{}{}{{Ed{c}{{Bl{e}}}}}}{{{E`{c}}{E`{c}}}g{}{}{}}{{{E`{c}}{E`{c}}}e{}{}}0{{{E`{{Dn{c}}}}c}eAd{}}2{{{E`{{Dn{c}}}}{E`{c}}}eAd{}}1{{{E`{e}}{E`{e}}}g{}{{Bn{}{{Bl{c}}}}}{}}13{{{Ef{c}}gi}dAd{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}{{Fb{{Ej{Id}}}}}}{{{Gf{}{{Gd{c}}}}i}{{Gh{ec}}}{{Gf{e}}}Ad{{Fb{F`}}}{{Ed{}{{Bl{g}}}}}}{{{E`{c}}}eIf{}}{{e{A`{Fj}}}{{Fl{ce}}}Ad{{Fn{c}}}}{{{Gf{}{{Gd{c}}}}{Ih{F`}}}d{{Gf{e}}}Ad}{{{Gh{ce}}{Ih{F`}}}dAd{{Gf{c}}}}{{{Gf{}{{Gd{c}}}}i}d{{Gf{e}}}Ad{{Fb{F`}}}{{Ed{}{{Bl{g}}}}}}{{{Gh{ce}}i}dAd{{Gf{c}}}{{Fb{F`}}}{{Ed{}{{Bl{g}}}}}}``{{{E`{e}}}{{E`{{Dn{c}}}}}Ad{{Hj{{Dn{c}}}}}}{{{E`{e}}{E`{e}}}g{}{{Ij{}{{Bl{c}}}}}{}}<=>;=>=;<{{eg{C`{{Ej{Gb}}}}}{{l{dEn}}}Ad{{Fn{c}}Il}{{In{c}}}}{{{E`{c}}}{{E`{{Dn{e}}}}}{}Ad}{ce{}{}}0000{{{E`{{J`{c}}}}}{{J`{{E`{c}}}}}Hh}{{{E`{e}}f}{{C`{{E`{c}}}}}{}{{D`{}{{Cn{c}}}}}}{c{{l{e}}}{}{}}0000000000000000000{cn{}}000000000{{}{{E`{c}}}{}}{{{E`{{Cl{ce}}}}}{{Cl{{E`{c}}{E`{e}}}}}{}{}}{{{El{ce}}}{{E`{c}}}{}Ad}{{{El{ce}}}{{E`{{Dn{e}}}}}{}Ad}8888888888{{{E`{c}}{E`{e}}}{{E`{{Cl{ce}}}}}{}{}}``{{{Jb{ce}}im}{{l{kEn}}}Ad{{Fn{c}}Il}{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{}{{Fd{{Ef{c}}}{{Bl{{l{kEn}}}}}}}}{{{Jb{ce}}ik}{{l{dEn}}}Ad{{Fn{c}}Il}{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}{{Fd{{G`{c}}}{{Bl{{l{dEn}}}}}}}};;;;{{{Jb{ce}}Gj{Ej{Ff}}f}{{l{dEn}}}Ad{{Fn{c}}Il}}{fc{}}000{fd}0{{Jdh}j}{{{Jb{ce}}h}j{HfAd}{Hf{Fn{c}}}}{cc{}}0{{{Jb{ce}}Ib}{{E`{c}}}Ad{{Fn{c}}Il}}{{{Jb{ce}}}gAd{{Fn{c}}Il}{}}{{}f}0{ce{}{}}0{{{Jb{ce}}{Ih{F`}}}dAd{{Fn{c}}Il}}{{{Jb{ce}}i}dAd{{Fn{c}}Il}{{Fb{F`}}}{{Ed{}{{Bl{g}}}}}}{{eg{C`{{Ej{Gb}}}}}{{l{dEn}}}Ad{{Fn{c}}Il}{{In{c}}}}{c{{l{e}}}{}{}}000{cn{}}055```````{{HnCd{Ej{Eh}}fFd}{{l{GjEn}}}}{{JfCd{Ej{Eh}}fFd}{{l{GjEn}}}}{{HnCd{Ej{Eh}}f{Dn{c}}}{{l{GjEn}}}Ad}{{JfCd{Ej{Eh}}f{Dn{c}}}{{l{GjEn}}}Ad}{{HnCd{Ej{Ff}}f{Ej{Eh}}f}{{l{{Cl{Gj{E`{c}}}}En}}}Ad}{{JfCd{Ej{Ff}}f{Ej{Eh}}f}{{l{{Cl{Gj{E`{c}}}}En}}}Ad}{{FhCdFjfFd}{{l{dEn}}}}{{HnCd{Ej{Gb}}fFd}{{l{GjEn}}}}{{JfCd{Ej{Gb}}fFd}{{l{GjEn}}}}>>>>{JfJf}{JhJh}{{ce}d{}{}}0{{JhJh}Jj}{Jf{{Jl{Jh}}}}{{HnGj{Dn{c}}}{{l{dEn}}}Ad}{{JfGj{Dn{c}}}{{l{dEn}}}Ad}{{HnGjGj}{{l{dEn}}}}{{JfGjGj}{{l{dEn}}}}{fc{}}000{fd}0{{HnCdJnf}{{l{dEn}}}}{{JfCdJnf}{{l{dEn}}}}{{JhJh}Cj}{{Jfh}j}{{Jhh}j}{cc{}}{{{Ej{Id}}}Jh}1{JnJh}{{Jhc}dK`}{{}f}0{{Hn{Ej{Ff}}f}{{l{{E`{c}}En}}}Ad}{{Jf{Ej{Ff}}f}{{l{{E`{c}}En}}}Ad}{ce{}{}}0{{HnCd{Ej{Id}}}d}{{JfCd{Ej{Id}}}d}{GlJf}{{JhJh}{{Ih{Jj}}}}{JfGl}{Jff}66{c{{l{e}}}{}{}}000{cn{}}088````````````````````{{{Kb{c}}{Ej{Eh}}}{{A`{{Kd{c}}}}}{KfBf}}{{{Kb{c}}g{Ej{Id}}}dAd{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}}{{{Kb{c}}}d{KfBf}}{{{Kb{c}}ee}d{KfBf}{Df{Kh{}{{Cn{f}}}}}}1{{{Kb{c}}g{Ej{Eh}}fk}{{l{dEn}}}Ad{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}{{Fb{{Dn{c}}}}}{{Ed{}{{Bl{{E`{i}}}}}}}}{{{Kb{c}}g{Ej{Gb}}fk}{{l{dEn}}}Ad{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}{{Fb{{Dn{c}}}}}{{Ed{}{{Bl{{E`{i}}}}}}}}>>>>>>>>>>>>>>{eF`Ad{{In{c}}}}{KjKj}{{{Kd{c}}}{{Kd{c}}}{DfAd}}{{ce}d{}{}}0{{}Kl}{{{Kb{c}}{Ej{Id}}f{Ej{Id}}f}{{l{dEn}}}Ad}``{{}Kn}{fc{}}0000000000000{fd}000000{{{Kb{c}}gJnf}{{l{dEn}}}Ad{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}}{{{Kb{c}}g}dAd{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}}{{KjKj}Cj}{{L`L`}Cj}{{{Kd{c}}{Kd{c}}}Cj{LbAd}}{{{Kb{c}}}dAd}{{{Kb{c}}{Ej{Gb}}f{E`{{Dn{c}}}}}{{l{dEn}}}Ad}{{{Kb{c}}}{{C`{{C`{{Kd{c}}}}}}}{KfBf}}{{{Kb{c}}{Ej{Gb}}}{{A`{{Kd{c}}}}}{KfBf}}{{Kjh}j}0{{L`h}j}0{{Klh}j}{{Klh}{{l{dLd}}}}{{{Lf{c}}h}j{HfLh}}{{Knh}j}{{{Kd{c}}h}j{HfAd}}{{{Kb{c}}h}j{HfAd}}{cc{}}000000{{{Kb{c}}Ib}{{E`{c}}}Ad}{{}f}000000{ce{}{}}000000{{KnCj}Kn}`{{{Kb{c}}}Lj{KfBf}}{{{Kb{c}}{Ih{F`}}}dAd}{{{Kb{c}}g}dAd{{Fb{F`}}}{{Ed{}{{Bl{e}}}}}}{KlF`}{{{Kb{c}}{Ej{Ff}}f}{{l{{E`{c}}En}}}Ad}{{KnAbe{Ln{gLl}}}{{l{dM`}}}Ad{{In{c}}}Mb}{{Abe{C`{{C`{c}}}}}{{l{{Kb{c}}En}}}{KfBf}{{In{c}}}}77{{eg{C`{{Ej{Gb}}}}}{{l{dEn}}}Ad{{Fn{c}}Il}{{In{c}}}}99{cF`{}}00{c{{l{e}}}{}{}}0000000000000{cn{}}000000{{{Kb{c}}}{{l{d{C`{L`}}}}}{KfBf}}{{{Kb{c}}ee}{{l{d{C`{L`}}}}}{KfBf}{Df{Kh{}{{Cn{f}}}}}}01{{Kn{Md{f}}}Kn}0???????````````````````````````````??????{fc{}}00000{fd}00{{{Mf{ce}}h}j{HfMh}{HfIn}}{{{Mj{c}}h}j{HfMh}}{{{Ml{c}}h}j{HfMh}}{cc{}}00{{}f}00{ce{}{}}00{{{Mf{ce}}}{{Mj{c}}}MhIn}{{Abc}{{Mf{ec}}}InMh}{{{Mf{ce}}f}{{Ml{c}}}MhIn}??????>>>333````````````33333333333333{MnMn}{N`N`}{NbNb}{NdNd}{{ce}d{}{}}000{{MnMn}Jj}`{fc{}}0000000000000{c{{l{Nb}}}Nf}{c{{l{Nh}}}Nf}{fd}000000{{NjNj}Cj}{{MnMn}Cj}`{{Njh}j}{{Nlh}j}{{Mnh}j}{{N`h}j}{{Nbh}j}{{Ndh}j}{{Nhh}j}{cc{}}000000{{Abe{C`{{C`{c}}}}}Nl{BfAdKf}{{In{c}}}}{{Abe{C`{{C`{c}}}}Nj}Nh{BfAdKf}{{In{c}}}}{Cb{{l{Mnc}}}{}}`{{}f}000000`{ce{}{}}000000{{NlNj}Nh}``````{{MnMn}{{Ih{Jj}}}}````{{Nbc}lNn}{{Nhc}lNn}```4444{c{{l{e}}}{}{}}0000000000000{cn{}}0000006666666`````6666666666{O`O`}{ObOb}{OdOd}{OfOf}{{ce}d{}{}}000{{O`O`}Jj}{{OhOh}Jj}{O`Id}{fc{}}000000000{fd}0000{{O`O`}Cj}{{OhOh}Cj}{{ObOb}Cj}{{OdOd}Cj}{{OfOf}Cj}{{O`h}j}0{{Ohh}j}0{{Obh}j}0{{Odh}j}0{{Ofh}j}0{cc{}}{{{Cl{Idf}}}O`}{{{Ej{Id}}}O`}{{{Cl{cO`Oj}}}Oh{{Dj{Cb}}}}{{{Cl{O`Oj}}}Oh}4{OlOh}{{{Cl{fc}}}Ob{{Dj{Cb}}}}6{{{Cl{Obfc}}}Od{{Dj{Cb}}}}77{{{Cl{fCb{On{O`F`}}}}}Of}{{{Cl{fF`{On{O`F`}}}}}Of}{{{Cl{fF`}}}Of}{{{Cl{fCb}}}Of}{{O`c}dK`}{O`f}{{}f}0000{ce{}{}}0000{{O`O`}{{Ih{Jj}}}}{{OhOh}{{Ih{Jj}}}}2222{cF`{}}0000{c{{l{e}}}{}{}}000000000{cn{}}000055555````````````````````````````````````````````````````````````````````{{{Dn{c}}c}{{Dn{c}}}Ad}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Ad}0001{{{A`{c}}{A`{c}}}{{A`{c}}}Ad}{{{Dn{c}}{Dn{c}}}dAd}0{{{Ab{c}}{C`{{C`{C`}}}}{C`{Ad}}}dAh}{{}Id}{{{Af{c}}}{{Ej{Eh}}}Ad}{{{Af{c}}e}{{Ej{Eh}}}AdAh}{{{Af{c}}}{{C`{Ad}}}Ad}{cIdAh}{{{Af{c}}}{{C`{{Cl{{Ej{Eh}}Aj}}}}}Ad}{{Fne{Ej{Id}}}d{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}}{{{Af{c}}ei}dAd{{Fb{{Ej{Id}}}}}{{Fb{F`}}}{{Cd{}{{Bl{g}}}}}}{{{Af{c}}Fjg}dAd{{Fb{F`}}}{{Cd{}{{Bl{e}}}}}}{{Fne{Ej{Eh}}fk}{{l{dEn}}}{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}Ad{{Fb{{Dn{g}}}}}{{Ed{}{{Bl{{E`{i}}}}}}}}{{Fne{Ej{Gb}}fk}{{l{dEn}}}{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}Ad{{Fb{{Dn{g}}}}}{{Ed{}{{Bl{{E`{i}}}}}}}}{{{Af{c}}}fAd}{ce{}{}}0000000000000000000000000000000000000000000000000000000009{{{Af{c}}e}IbAdAh}{{{Dn{c}}}{{Dn{c}}}Df}{{{Ej{c}}}{{Ej{c}}}{DfAl}}{EhEh}{GbGb}{FfFf}{IdId}{JnJn}{AnAn}{AA`AA`}{AAbAAb}{FjFj}{IbIb}{{{A`{c}}}{{A`{c}}}Df}{OlOl}{{{AAd{c}}}{{AAd{c}}}{DfAd}}{{{Af{c}}}{{Af{c}}}{DfAd}}{{{AAf{c}}}{{AAf{c}}}{DfAh}}{{{AAh{c}}}{{AAh{c}}}{DfAh}}{{ce}d{}{}}00000000000000000{{{Ej{c}}{Ej{c}}}JjAl}{{IdId}Jj}{{FjFj}Jj}{Anf}{AA`f}{AAbf}{{{Ej{c}}}cAl}{{{Af{c}}}JnAd}{{{A`{c}}}fAd}{{{Af{c}}{C`{{C`{Cj}}}}}{{Cl{{Af{c}}{C`{{C`{c}}}}}}}Ad}{{{Af{c}}}eAd{}}{{{Af{c}}e}gAd{}{}}0{{{Af{c}}}{{C`{{Ej{Gb}}}}}Ad}{{{AAd{c}}f}CbAd}{{Fn{Ej{Id}}f{Ej{Id}}f}{{l{dEn}}}}{{{Af{c}}ek}dAd{{Dj{Cb}}}{{Fb{{AAj{c}}}}}{{D`{}{{Cn{g}}}}}{{Ed{{AAl{c}}}{{Bl{i}}}}}}{{AAh{A`{c}}{A`{{A`{A`}}}}ei}{{l{dEn}}}InDlAAn{{AB`{g}}}}{{{AAf{c}}}AfAh}{{{Dn{c}}}{{Dn{c}}}Ad}{{{Ej{c}}}{{A`{e}}}AlAd}{{}Eh}{{}{{Af{c}}}Ad}{{}{{Ab{c}}}{ABbAh}}>{{{Af{c}}}fAd}{{{Dn{c}}}{{Ih{c}}}Ad}{fc{}}000000000000000000000000000000000000000000000000000000000{{{Af{c}}{C`{{C`{Cj}}}}}{{Cl{{Af{c}}{C`{{C`{c}}}}}}}Ad}8{fd}0000000000000000000000000000{{Jn{Ef{c}}f}{{l{dEn}}}Ad}{{{Af{c}}{Ej{Gb}}}dAd}{{{Af{c}}e}dAd{{Fb{{Ej{Id}}}}}}{{FneJnf}{{l{dEn}}}{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}}{{Fne}d{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}}{{{Dn{c}}{Dn{c}}}CjAd}{{{Ej{c}}{Ej{c}}}Cj{LbAl}}{{EhEh}Cj}{{GbGb}Cj}{{FfFf}Cj}{{IdId}Cj}{{JnJn}Cj}{{AnAn}Cj}{{AA`AA`}Cj}{{AAbAAb}Cj}{{FjFj}Cj}{{IbIb}Cj}{{{A`{c}}{A`{c}}}CjLb}{{{Dn{c}}}cAd}{{{A`{c}}gikmoAaAcAeAgAi}eAd{}{{Cd{c}{{Bl{e}}}}}{{Cd{Jn}{{Bl{e}}}}}{{Cd{An}{{Bl{e}}}}}{{Cd{AA`}{{Bl{e}}}}}{{Cd{AAb}{{Bl{e}}}}}{{Cd{Ib}{{Bl{e}}}}}{{Cd{e}{{Bl{e}}}}}{{Cd{ee}{{Bl{e}}}}}{{Cd{ee}{{Bl{e}}}}}{{Cd{ec}{{Bl{e}}}}}}{{{A`{c}}gikmoAaAcAeAgAie}eAdLb{{Cd{c}{{Bl{e}}}}}{{Cd{Jn}{{Bl{e}}}}}{{Cd{An}{{Bl{e}}}}}{{Cd{AA`}{{Bl{e}}}}}{{Cd{AAb}{{Bl{e}}}}}{{Cd{Ib}{{Bl{e}}}}}{{Cd{e}{{Bl{e}}}}}{{Cd{ee}{{Bl{e}}}}}{{Cd{ee}{{Bl{e}}}}}{{Cd{ec}{{Bl{e}}}}}}{Fnd}{Jn{{A`{c}}}Ad}{Ib{{A`{c}}}Ad}{{Fn{Ej{Gb}}f{E`{{Dn{c}}}}}{{l{dEn}}}Ad}{{{Ab{c}}{ABd{c}}{AAf{c}}}CjAh}{{{Af{c}}}{{Ej{Gb}}}Ad}{{{AAf{c}}}{{C`{c}}}Ah}{{{Af{c}}}{{C`{{Cl{{Ej{Gb}}Aj}}}}}Ad}{{{ABf{c}}h}jAd}{{{Dn{c}}h}jHf}{{{Ej{c}}h}j{HfAl}}{{ABhh}j}{{ABjh}j}{{ABlh}j}{{Ehh}j}{{Gbh}j}{{Ffh}j}{{Idh}j}{{Jnh}j}{{Anh}j}{{AA`h}j}{{AAbh}j}{{Fjh}j}{{Ibh}j}{{{A`{c}}h}jHf}{{Olh}j}{{{AAj{c}}h}j{HfAd}}{{{ABn{ceg}}h}j{HfAd}{Hf{Fb{{AAj{c}}}}}{Hf{D`{}{{Cn{e}}}}}}{{{AAd{c}}h}j{HfAd}}{{{Af{c}}h}j{HfAd}}{{{AAl{c}}h}j{HfAd}}{{Enh}j}0{{AC`h}j}0{{{Ab{c}}h}j{HfAh}}{{{AAf{c}}h}j{HfAh}}{{{ACb{c}}h}j{HfAh}}{{{AAh{c}}h}j{HfAh}}{cc{}}{c{{Dn{c}}}Ad}01{{{Dn{c}}}{{Dn{c}}}Ad}{{{Cl{cc}}}{{Dn{c}}}Ad}{{{Ej{Ff}}}{{Ej{Id}}}}{{{Ej{Eh}}}{{Ej{Id}}}}5{{{Ej{Gb}}}{{Ej{Id}}}}666666{FfId}{GbId}8{EhId}9999999{{{Cl{cAj}}}Ol{{Fb{{Ej{Id}}}}}}:{{{A`{c}}}{{AAj{c}}}Ad};{{{Cl{c{A`{e}}}}}{{AAj{e}}}{{Dj{Cb}}}Ad}<<<<{ACdEn}======{{{A`{Ad}}b}{{ACf{{AAf{c}}}}}`}{{{A`{Ad}}b}{{ACf{{AAh{c}}}}}`}{{{Af{c}}}{{C`{{AAd{c}}}}}Ad}{{{Af{c}}}{{On{O`F`}}}Ad}{{FnIb}{{E`{c}}}Ad}{{{AAf{c}}}AChAh}{{{AAh{c}}}{{AAf{c}}}Ah}{{{Ej{c}}e}d{ACjAl}K`}{{Ehc}dK`}{{Gbc}dK`}{{Ffc}dK`}{{Idc}dK`}{{Jnc}dK`}{{Fjc}dK`}{{Ibc}dK`}{{{AAf{c}}g}{{ACf{d}}}Ah{{AAn{c}}}{{ACl{ce}}}}{{{A`{c}}}F`Ad}{{{Ej{c}}}fAl}{Jnf}{Ibf}{{}f}0000000000000000000000000000{Fj{{Ej{Gb}}}}{{{Af{c}}}{{Ej{Ff}}}Ad}{{{Af{c}}}{{C`{{Cl{{Ej{Ff}}Aj}}}}}Ad}{ce{}{}}0000000000000000000000000000{{{ABn{ceg}}}iAd{{Fb{{AAj{c}}}}}{{D`{}{{Cn{e}}}}}{}}{{{Dn{c}}}{{Dn{c}}}Ad}{JnCj}{{{Dn{c}}}CjAd}{{e{AAf{c}}g}{{l{{AAh{c}}En}}}Ah{{ACn{c}}}In}{{eg}{{l{{AAf{c}}En}}}Ah{{ACn{c}}}In}{{egCj}{{l{{AAf{c}}En}}}Ah{{ACn{c}}}In}{{{Af{c}}eg}fAd{{Dj{Cb}}}{{Ed{{AAl{c}}}{{Bl{{C`{{Cl{{A`{c}}Fj}}}}}}}}}}{{{Af{c}}eg}fAd{{Dj{Cb}}}{{Ed{{AAl{c}}}{{Bl{{C`{{Cl{{A`{c}}{A`{c}}}}}}}}}}}}{{{Af{c}}}FjAd}{{{Af{c}}}{{C`{{`{c}}}}}Ad}{{{Af{c}}}fAd}{{{Dn{c}}c}{{Dn{c}}}Ad}0{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Ad}0{{{A`{c}}{A`{c}}}{{A`{c}}}Ad}{{{A`{c}}c}{{A`{c}}}Ad}{{{Dn{c}}{Dn{c}}}dAd}0{{{AAd{c}}}CbAd}{{{Dn{c}}}eAd{}}0{{{A`{c}}}eAd{}}{cEhAh}{{}{{Ab{c}}}Ah}{{{Ej{c}}}{{A`{e}}}AlAd};;;;;{{{Dn{c}}}cAd}{{{In{}{{H`{c}}{AD`{e}}{ADb{g}}}}}gDfLhABb}0{{{Ej{c}}{Ej{c}}}{{Ih{Jj}}}Al}{{IdId}{{Ih{Jj}}}}{{FjFj}{{Ih{Jj}}}}`{{{Af{c}}}ADdAd}{{{AAf{c}}}{{ADf{c}}}Ah}{EhAd}{AA`Ad}{IbAd}{{{Af{c}}}{{ABf{c}}}Ad}{{{AAf{c}}}{{ACb{c}}}Ah}{{{AAd{c}}}{{A`{{A`{c}}}}}Ad}{{Fn{Ih{F`}}}d}>{e{{A`{c}}}Ad{{Kh{}{{Cn{{A`{c}}}}}}}}{{Fne}d{{Fb{F`}}}{{Ed{}{{Bl{c}}}}}}{{{AAl{c}}{Ej{Eh}}Aj}{{A`{c}}}Ad}{{{AAl{c}}eAj}{{A`{c}}}Ad{{Fb{{Ej{Id}}}}}}{{AlfAj}{{A`{c}}}Ad}{{{Ej{c}}Aj}{{A`{e}}}AlAd}{{EhfAj}{{A`{c}}}Ad}{{GbfAj}{{A`{c}}}Ad}{{FffAj}{{A`{c}}}Ad}{{IdfAj}{{A`{c}}}Ad}{{{A`{c}}{AAl{c}}}dAd}{{{AAl{c}}Ib}{{A`{c}}}Ad}{{{AAl{c}}{Ej{Gb}}Aj}{{A`{c}}}Ad}{{Fn{Ej{Ff}}f}{{l{{E`{c}}En}}}Ad}{{{AAl{c}}{Ej{Ff}}Aj}{{A`{c}}}Ad}{{{AAl{c}}Jn}{{A`{c}}}Ad}{{cb}{{ACf{{AAf{e}}}}}ADh`}{{cb}{{ACf{{AAh{e}}}}}ADh`}{{{Ej{c}}Oj}{{A`{e}}}AlAd}{AnAj}{AA`Aj}{AAbAj}{{{Af{c}}}JnAd}{{{Af{c}}f}dAd}{{{Af{c}}eg}fAd{{Dj{Cb}}}{{Ed{{AAl{c}}}{{Bl{{C`{{Cl{{A`{c}}{A`{c}}}}}}}}}}}}{{{Af{c}}}{{C`{{`{c}}}}}Ad}{En{{Ih{ADj}}}}{{{Dn{c}}}{{Dn{c}}}Ad}{{{A`{c}}}{{A`{c}}}Ad}{{{Dn{c}}{Dn{c}}}{{Dn{c}}}Ad}{{{Dn{c}}c}{{Dn{c}}}Ad}1110{{{A`{c}}{A`{c}}}{{A`{c}}}Ad}{{{Dn{c}}{Dn{c}}}dAd}0{e{{A`{c}}}Ad{{Kh{}{{Cn{{A`{c}}}}}}}}{{eg{C`{{Ej{Gb}}}}}{{l{dEn}}}Ad{{Fn{c}}Il}{{In{c}}}}{{{In{}{{H`{c}}{AD`{e}}{ADb{g}}}}ck}{{l{dEn}}}DfLhABbAd{{Gf{i}}}}{{{AAf{c}}b}{{C`{Ad}}}`}{{{AAh{c}}b}{{C`{Ad}}}`}{ce{}{}}00000000000000000{cF`{}}0{{{AAf{c}}}{}Ah}{c{{l{e}}}{}{}}0{{{Ej{Id}}}{{l{{Ej{Ff}}c}}}{}}1{{{Ej{Id}}}{{l{{Ej{Eh}}c}}}{}}{{{Ej{Id}}}{{l{{Ej{Gb}}c}}}{}}3333333333333333333333333333333333333333333333333333333{cn{}}0000000000000000000000000000{{{Af{c}}}{{Ej{Eh}}}Ad}{{{Af{c}}e}{{Ej{Eh}}}AdAh}{{AAfg{A`{{A`{A`}}}}k}{{l{En}}}ADl{{ADn{c}}}{{AE`{ce}}}AAn{{AEb{i}}}}:::::::::::::::::::::::::::::{{{A`{c}}g}{{ABn{ceg}}}Ad{{Fb{{AAj{c}}}}}{{D`{}{{Cn{e}}}}}}{{{In{}{{H`{c}}{AD`{e}}{ADb{g}}}}}{{In{}{{H`{c}}{AD`{e}}{ADb{g}}}}}DfLhABb}{{{AAf{c}}eb}{{ACf{d}}}`AEd}{{{AAh{c}}eb}{{ACf{d}}}`AEd}````>>>>>>{Ljd}{LjLj}{ADdADd}{{{ADf{c}}}{{ADf{c}}}{DfAh}}{{ce}d{}{}}00{Lj{{A`{{Ej{Id}}}}}}{{{ADf{c}}}{{C`{c}}}Ah}{fc{}}00000{fd}00{{LjLj}Cj}{{Ljh}j}{{ADdh}j}{{{ADf{c}}h}j{HfAh}}{cc{}}00{ADd{{C`{{Ej{Id}}}}}}{{}f}00{ce{}{}}00{Lj{{`{{Kh{}{{Cn{{`{{AEf{}{{Cn{{Cl{ff}}}}}}}}}}}}}}}}111{c{{l{e}}}{}{}}00000{cn{}}00333`````````````````{{{AEh{ce}}{AEh{ce}}}{{AEh{ce}}}AdAEj}44444444444444444444{{{ACh{c}}}{{ACh{c}}}{DfAd}}{{{AEl{c}}}{{AEl{c}}}{DfAh}}{{{AEn{ce}}}{{AEn{ce}}}{DfAh}{Df{AF`{c}}}}{AFbAFb}{AFdAFd}{AFfAFf}{{{AEh{ce}}}{{AEh{ce}}}DfDf}{AjAj}{{ce}d{}{}}0000000{{{ACh{c}}{C`{c}}}{{AEh{cAFb}}}Bd}{{{ACh{c}}{AEh{cAFb}}}{{AEh{cAFf}}}Bd}`{{{ACh{c}}c}{{AEh{cAFf}}}Bd}{{{ACh{c}}c}{{AEh{cAFd}}}Bd}{{}Aj}{fc{}}0000000{{{AEh{ce}}}{{A`{c}}}{}{}}1111111111101{{{ACh{c}}{AEh{cAFf}}}{{AEh{cAFf}}}Bd}{fd}000000000{{{ACh{c}}}{{AEh{cAFb}}}Bd}{{{ACh{c}}}{{AEh{cAFf}}}Bd}{{{ACh{c}}}{{AEh{cAFd}}}Bd}{{{ACh{c}}}{{AEh{{Dn{c}}AFd}}}Bd}{{AjAj}Cj}{{{ACh{c}}}AbBd}{{{ACh{c}}}fBd}{{{ACh{c}}{AEh{cAFf}}}{{C`{c}}}Bd}{{{AE`{}{{Bl{c}}}}}Cj{}}{{{ACh{c}}h}j{HfAd}}{{{AFh{c}}h}j{HfAd}}{{{AEl{c}}h}j{HfAh}}{{{AEn{ce}}h}j{HfAh}{Hf{AF`{c}}}}{{AFjh}j}{{AFbh}j}{{AFdh}j}{{AFfh}j}{{{AEh{ce}}h}jHfHf}{{Ajh}j}{cc{}}000000000{{{ACh{c}}}cBd}00>{{{AEh{ce}}{AFl{f}}}{{A`{c}}}{}{}}{{{AEh{ce}}AFn}{{A`{c}}}{}{}}{{{AEh{ce}}f}c{}{}}021{{}f}000000000{ce{}{}}000000000`{{{AEh{ce}}}{{`{{Kh{}{{Cn{c}}}}}}}{}{}}0{{{ACh{c}}}AbBd}`{{{ACh{c}}cce}{{C`{c}}}Bd{{D`{}{{Cn{Oj}}}}Df}}{{{ACh{c}}{C`{c}}}{{AEh{cAFd}}}Bd}{{{ACh{c}}{AEh{cAFd}}}{{AEh{cAFb}}}Bd}{{{AEh{ce}}c}{{AEh{ce}}}AdAEj}{{}{{AE`{}{{Bl{c}}}}}{}}{{AbAb}{{ACh{c}}}Bd}{{{AEh{AFb}}AG`}{{AEl{c}}}Ah}{{{`{ce}}}{{AEn{ce}}}Ah{{AF`{c}}}}{c{{AEn{ce}}}Ah{{AF`{c}}}}{e{{AEn{ce}}}Ah{{AF`{c}}}}{{}Aj}{{{AEh{ce}}}f{}{}}{{{ACh{c}}}{{AFh{c}}}Bd}2{{{AE`{}{{Bl{c}}}}e}{{l{cEn}}}{}{{Ed{}{{Bl{{l{En}}}}}}}}{{{AEh{cAFd}}Aj}{{AEh{cAFd}}}Ad}{{{ACh{c}}{AEh{cAFf}}Aj}{{AEh{cAFf}}}Bd}{{{ACh{c}}cAj}cBd}={{{AEh{ce}}{AEh{ce}}}{{AEh{ce}}}AdAEj}{ce{}{}}0000000{c{{l{e}}}{}{}}0000000000000000000{cn{}}0000000002222222222``````````````````{{{AG`{c}}{AG`{c}}}{{AG`{c}}}Ad}{{{AG`{c}}c}dAd}{{{AG`{c}}{AG`{c}}}dAd}{{AF`AF`}d}{AF`d}{AF`C`}88{AF`Cj}{{{AG`{c}}}{{AG`{c}}}Df}{{ce}d{}{}}{{{AGd{}{{AGb{c}}}}{AEh{AFb}}AG`}{}{{AGf{e}}}Ah}{{{ACn{}{{AGh{c}}}}{AEh{AFd}}AG`}{}{{AF`{e}}}Ah}{{AGjcgi}{{ACf{d}}}DlAAn{{AB`{e}}}{{D`{}{{Cn{AEl}}}}Df}}{{}{{AG`{c}}}Ad}{fc{}}0{{{ACn{}{{AGh{c}}}}Ab}d{{AF`{e}}}Ah}{fd}{{{ACn{}{{AGh{c}}}}}c{{AF`{e}}}Ah}{{{AG`{c}}{AG`{c}}}CjLb}{AF`}{{{AG`{c}}h}jHf}{cc{}}{{{AGd{}{{AGb{c}}}}}{{A`{e}}}{{AGf{e}}}Ah}{{}f}{ce{}{}}{{{ACn{}{{AGh{c}}}}}Ab{{AF`{e}}}Ah}{{{AG`{c}}{AG`{c}}}{{AG`{c}}}Ad}{{{AG`{c}}{AG`{c}}}dAd}{{{AG`{c}}c}dAd}{{{ACn{}{{AGh{c}}}}}Dh{{AF`{e}}}Ah}{Ab{{AGd{}{{AGb{c}}}}}{{AGf{e}}}Ah}{{}AGj}{{}{{ADn{}{{AGl{c}}{AGn{g}}}}}{{AH`{e}{{AGn{g}}}}}ADl{}}{c{{AG`{e}}}DlAd}{Abc{}}{c{{ACf{{ACn{}{{AGh{e}}}}}}}ADh{{AF`{g}}}Ah}{c{{ACf{e}}}ADh{}}{AF`C`}{AF`d}>{c{{l{e}}}{}{}}0{cn{}}{{{AGd{}{{AGb{c}}}}}c{{AGf{e}}}Ah}{{{ADn{}{{AGl{c}}{AGn{g}}}}kmg}{{l{cAFj}}}{{AH`{e}{{AGn{g}}}}}ADl{}AAn{{AEb{i}}}{{D`{}{{Cn{AEn}}}}Df}}{ce{}{}}{{{ACn{}{{AGh{c}}}}g}{{ACf{d}}}{{AF`{e}}}AhAEd}```````1111{{{AHb{c}}}{{AHb{c}}}{DfAh}}{{ce}d{}{}}{{{AHb{c}}{AEh{AFb}}AG`}{}Ah}{{{AHb{c}}{AEh{AFd}}AG`}{}Ah}{{{AHb{c}}ei{AEh{AFb}}AG`}{{ACf{d}}}AhDl{{AAn{c}}}{{AB`{cg}}}}{fc{}}000{{{AHb{c}}Ab}dAh}{fd}0{{{AHb{c}}}{{AHd{c}}}Ah}{{{AHb{c}}h}j{HfAh}}{{{AHf{c}}h}j{HfAh}}{cc{}}0{{{AHb{c}}}{{A`{c}}}Ah}{{}f}0??{{{AHb{c}}}AbAh}{{{AHb{c}}}DhAh}{Ab{{AHb{c}}}Ah}{Abc{}}{c{{ACf{{AHb{e}}}}}ADhAh}{c{{ACf{e}}}ADh{}}{ce{}{}}{c{{l{e}}}{}{}}000{cn{}}0{{{AHb{c}}}eAh{}}{{{AHb{c}}{AHd{c}}g}{{l{{AHh{c}}AFj}}}Ah{{AAn{c}}}{{AEb{ce}}}}44{{{AHb{c}}e}{{ACf{d}}}AhAEd}`{{{AHd{c}}}dAh}{{{AHd{c}}{AHd{c}}}dAh}0{{{AHd{c}}A`}dAh}222{{{AHd{c}}}C`Ah}99{{{AHd{c}}}CjAh}{{{AHd{c}}}{{AHd{c}}}{DfAh}}{{ce}d{}{}}{fc{}}0{fd}{{{AHd{c}}}{}Ah}{{{AHd{c}}h}j{HfAh}}{cc{}}{{}f}{ce{}{}}{{{ABd{c}}}{{AHd{c}}}Ah};>1{c{{l{e}}}{}{}}0{cn{}}3``3333{{{AHj{c}}eik}{{ACf{d}}}AhDl{{AAn{c}}}{{AB`{cg}}}{{D`{}{{Cn{{AEl{c}}}}}}Df}}::::99{{{AHj{c}}h}j{HfAh}}{{{AHl{c}}h}j{HfAh}}887766{{{AHb{c}}}{{AHj{c}}}Ah}{{{ABd{c}}}{{AHl{c}}}Ah}666655{{{AHl{c}}gi{AHd{c}}}{{l{kAFj}}}Ah{{AAn{c}}}{{AEb{ce}}}{{D`{}{{Cn{{AEn{c{AHd{c}}}}}}}}Df}{}}99````99999999{{{AHh{c}}}{{AHh{c}}}{DfAh}}{{{AHn{c}}}{{AHn{c}}}{DfAh}}{{ce}d{}{}}0{{{AHh{c}}}cAh}{fc{}}0000000{fd}000{{{AI`{c}}}CjAh}{{{AIb{c}}}CjAh}{{{AHh{c}}h}j{HfAh}}{{{AHn{c}}h}j{HfAh}}{{{AI`{c}}h}j{HfAh}}{{{AIb{c}}h}j{HfAh}}{cc{}}000`{{}f}000{ce{}{}}000{{{AHb{c}}}{{AI`{c}}}Ah}{{{AHb{c}}}{{AIb{c}}}Ah}{{{AI`{c}}e}{{l{gEn}}}Ah{{Ed{{AHd{c}}}{{Bl{{l{{AHh{c}}En}}}}}}}{}}{{{AIb{c}}e}{{l{gEn}}}Ah{{Ed{{AHd{c}}}{{Bl{{l{{AHh{c}}En}}}}}}}{}}44{c{{l{e}}}{}{}}0000000{cn{}}000`{{{AHh{c}}}{{AHd{c}}}Ah}{{{AHh{c}}c}{{Cl{{AHd{c}}{AHn{c}}}}}Ah}8888```````8888{{{AId{c}}}{{AId{c}}}{DfAIf}}{{ce}d{}{}}{{{AId{c}}{AEh{AFb}}AG`}{}{AIfHf}}{{{AId{c}}{AEh{AFd}}AG`}{}{AIfHf}}{fc{}}000{{{AId{c}}Ab}d{AIfHf}}{fd}0{{{AId{c}}}{{AIh{c}}}{AIfHf}}{{{AId{c}}h}j{HfAIf}}{{{AIj{c}}h}j{HfAIf}}{cc{}}0{{{AId{c}}AbC`{Ih{C`}}}{{AId{c}}}{AIfHf}}{{{AId{c}}}{}{AIfHf}}{{{AId{c}}}A`{AIfHf}}{{}f}0{ce{}{}}0{{{AId{c}}}Ab{AIfHf}}{{{AId{c}}}Dh{AIfHf}}{Ab{{AId{c}}}{AIfHf}}{Abc{}}{c{{ACf{{AId{e}}}}}ADh{AIfHf}}{{cb}{{ACf{{AId{e}}}}}ADh{AIfHf}}{c{{ACf{e}}}ADh{}}:{{Abc}{{AId{e}}}Dl{AIfHf}}8{c{{l{e}}}{}{}}000{cn{}}0{{{AId{c}}}e{AIfHf}{}};;{{{AId{c}}e}{{ACf{d}}}{AIfHf}AEd}{{{AId{c}}eb}{{ACf{d}}}{AIfHf}AEd}``{{{AIh{c}}{AIh{c}}}d{AIfHf}}{{{AIl{c}}{AIl{c}}}d{AInHf}}{{{AIh{c}}}d{AIfHf}}{{{AIh{c}}}C`{AIfHf}}{ce{}{}}000{{{AIh{c}}}Cj{AIfHf}}{{{AIl{c}}}Cj{AInHf}}{{{AIh{c}}}{{AIh{c}}}{DfAIf}}{{{AIl{c}}}{{AIl{c}}}{DfAIf}}{{ce}d{}{}}0{{{AIh{c}}}dAIf}{{}{{AIh{c}}}{ABbAIf}}{fc{}}000{fd}0{{{AIh{c}}}{}{AIfHf}}{{{AIh{c}}h}j{HfAIf}}{{{AIl{c}}h}j{HfAIf}}{cc{}}0{{{AId{c}}}{{AIl{c}}}{AInHf}}{{}f}0??{{}{{AIh{c}}}AIf}2{{{AIh{c}}}C`{AIfHf}}{{{AIh{c}}}d{AIfHf}}{{{AIl{c}}}d{AInHf}}{ce{}{}}0{c{{l{e}}}{}{}}000{cn{}}022````22222222{{{AJ`{c}}eik}{{ACf{d}}}{AIfHf}DlAAn{{AB`{g}}}{{D`{}{{Cn{AEl}}}}Df}}{{{AJb{c}}eik}{{ACf{d}}}{AIfHf}DlAAn{{AB`{g}}}{{D`{}{{Cn{AEl}}}}Df}}{fc{}}0000000{fd}000{{{AJ`{c}}h}j{HfAIf}}{{{AJd{c}}h}j{HfAIf}}{{{AJb{c}}h}j{HfAIf}}{{{AJf{c}}h}j{HfAIf}}{cc{}}000{{}f}000<<<<{{{AId{c}}}{{AJ`{c}}}{AIfHf}}{{{AId{c}}}{{AJd{c}}}{AInHf}}{{{AId{c}}}{{AJb{c}}}AIf}{{{AId{c}}}{{AJb{c}}}{AIfHf}}{{{AId{c}}}{{AJf{c}}}{AInHf}}{c{{l{e}}}{}{}}0000000{cn{}}000{{{AJd{c}}gi{AIl{c}}}{{l{kAFj}}}{AInHf}AAn{{AEb{e}}}{{D`{}{{Cn{{AEn{{AIh{c}}}}}}}}Df}{}}{{{AJf{c}}gi{AIl{c}}}{{l{kAFj}}}{AInHf}AAn{{AEb{e}}}{{D`{}{{Cn{{AEn{{AIh{c}}}}}}}}Df}{}}{ce{}{}}000```000000{{{AJh{c}}}{{AJh{c}}}{DfAInHf}}{{{AJj{c}}}{{AJj{c}}}{DfAIf}}{{{AJl{c}}}{{AJl{c}}}{DfAIf}}{{ce}d{}{}}00{fc{}}00000{fd}00{{{AJj{c}}}Cj{AInHf}}{{{AJl{c}}}Cj{AInHf}}{{{AJh{c}}h}j{HfAInHf}}{{{AJj{c}}h}j{HfAIf}}{{{AJl{c}}h}j{HfAIf}}{cc{}}00{{}f}00==={{{AId{c}}}{{AJj{c}}}{AInHf}}0{{{AId{c}}}{{AJl{c}}}{AInHf}}0{{{AJj{c}}e}{{l{gEn}}}{AInHf}{{Ed{}{{Bl{{l{En}}}}}}}{}}{{{AJl{c}}e}{{l{gEn}}}{AInHf}{{Ed{}{{Bl{{l{En}}}}}}}{}}{ce{}{}}00{c{{l{e}}}{}{}}00000{cn{}}00222{{{AIl{c}}}{{AJj{c}}}{AInHf}}`````````````{{{AAn{}{{AJn{c}}}}}{{AK`{eg}}}{}Ah{}}444444444444{{{AKb{ceg}}}{{AKb{ceg}}}{DfADh}{DfAh}{Df{AAn{e}}}}{{{AKd{ceg}}}{{AKd{ceg}}}{DfADh}{DfAh}{Df{AAn{e}}}}{{{AKf{ceg}}}{{AKf{ceg}}}{DfAEd}{DfAh}{Df{AAn{e}}}}{{{AKh{ceg}}}{{AKh{ceg}}}{DfAEd}{DfAh}{Df{AAn{e}}}}{{{AK`{ce}}}{{AK`{ce}}}{DfAh}Df}{{{AKj{c}}}{{AKj{c}}}{DfAh}}{{ce}d{}{}}00000{{AClc}{{ACf{d}}}Ah}{{{AKb{ce{AKj{e}}}}e}{{ACf{d}}}ADhAh}{{{AKd{ce{AKj{e}}}}e}{{ACf{d}}}ADhAh}{{{AKf{ce{AKj{e}}}}e}{{ACf{d}}}AEdAh}{{{AKh{ce{AKj{e}}}}e}{{ACf{d}}}AEdAh}{ACl{{ACf{d}}}}{{{AKb{ce{AKj{e}}}}}{{ACf{d}}}ADhAh}{{{AKd{ce{AKj{e}}}}}{{ACf{d}}}ADhAh}{{{AKf{ce{AKj{e}}}}}{{ACf{d}}}AEdAh}{{{AKh{ce{AKj{e}}}}}{{ACf{d}}}AEdAh}{fc{}}000{{{AK`{ce}}}gAh{}{}}1{{{AKj{c}}}eAh{}}2222222{fd}00000{AKlcAEd}{{{AKf{ce{AKj{e}}}}}cAEdAh}{{{AKh{ce{AKj{e}}}}}cAEdAh}{{{AKb{ceg}}h}j{HfADh}{HfAh}{Hf{AAn{e}}}}{{{AKd{ceg}}h}j{HfADh}{HfAh}{Hf{AAn{e}}}}{{{AKf{ceg}}h}j{HfAEd}{HfAh}{Hf{AAn{e}}}}{{{AKh{ceg}}h}j{HfAEd}{HfAh}{Hf{AAn{e}}}}{{{AK`{ce}}h}j{HfAh}Hf}{{{AKj{c}}h}j{HfAh}}{cc{}}00000{{{AAn{}{{AJn{c}}}}}{}{}}{{{AKj{c}}}{}Ah}{cAKnADh}{cAKlAEd}{{}f}{c{{AKb{ce{AKj{e}}}}}ADhAh}1{c{{AKd{ce{AKj{e}}}}}ADhAh}2{c{{AKf{ce{AKj{e}}}}}AEdAh}3{c{{AKh{ce{AKj{e}}}}}AEdAh}44{ce{}{}}00000{c{{AAn{}{{AJn{c}}}}}{}}{{{J`{Ad}}}{{AKj{c}}}Ah}{AEb{{ACf{c}}}Ah}{{{AKb{ce{AKj{e}}}}}{{ACf{e}}}ADhAh}{{{AKd{ce{AKj{e}}}}}{{ACf{e}}}ADhAh}{AEbACf}{{{AKb{ce{AKj{e}}}}}ACfADhAh}{{{AKd{ce{AKj{e}}}}}ACfADhAh}{ACleAh{{AAn{c}}}}{{{AKb{ce{AKj{e}}}}}{{AKj{e}}}ADhAh}{{{AKd{ce{AKj{e}}}}}{{AKj{e}}}ADhAh}{{{AKf{ce{AKj{e}}}}}{{AKj{e}}}AEdAh}{{{AKh{ce{AKj{e}}}}}{{AKj{e}}}AEdAh}{ACl{{AK`{ce}}}Ah{}}>>>>>>{c{{Cl{OjOj}}}{}}{c{{l{e}}}{}{}}00000000000{cn{}}00000{ce{}{}}00000{{AB`c}{{ACf{d}}}Ah}{{{AKf{ce{AKj{e}}}}e}{{ACf{d}}}AEdAh}{{{AKh{ce{AKj{e}}}}e}{{ACf{d}}}AEdAh}{AB`{{ACf{d}}}}{{{AKf{ce{AKj{e}}}}}{{ACf{d}}}AEdAh}{{{AKh{ce{AKj{e}}}}}{{ACf{d}}}AEdAh}","c":[],"p":[[6,"SerdeFormat",0],[1,"unit"],[1,"usize"],[5,"Formatter",2582],[8,"Result",2582],[6,"Result",2583],[5,"TypeId",2584],[1,"slice"],[1,"u32"],[10,"Field",27],[10,"FftGroup",27],[10,"CurveAffine",27],[17,"ScalarExt"],[17,"Base"],[17,"CurveExt"],[5,"Coordinates",2585],[5,"CtOption",2586],[10,"WithSmallOrderMulGroup",2587],[10,"Ord",2588],[17,"AffineExt"],[10,"CurveExt",27],[17,"Output"],[10,"Mul",2589],[5,"Vec",2590],[1,"str"],[10,"Fn",2591],[5,"Box",2592],[5,"Choice",2586],[1,"bool"],[1,"tuple"],[17,"Item"],[10,"IntoIterator",2593],[10,"Send",2594],[10,"Sync",2594],[10,"Clone",2595],[1,"u64"],[10,"AsRef",2596],[10,"RngCore",2597],[6,"Assigned",938],[5,"Value",74],[10,"Add",2589],[10,"FnOnce",2591],[5,"Region",74],[5,"Advice",938],[5,"Column",938],[5,"AssignedCell",74],[6,"Error",938],[5,"String",2598],[10,"Into",2596],[10,"FnMut",2591],[5,"Instance",938],[10,"TableLayouter",377],[5,"TableColumn",938],[5,"SimpleTableLayouter",74],[10,"Assignment",938],[5,"Table",74],[5,"Fixed",938],[17,"Root"],[10,"Layouter",74],[5,"NamespacedLayouter",74],[5,"Cell",74],[5,"RegionIndex",74],[5,"RegionStart",74],[17,"Config"],[17,"Loaded"],[10,"Chip",74],[10,"Debug",2582],[10,"Copy",2594],[10,"Borrow",2599],[5,"SimpleFloorPlanner",74],[10,"RegionLayouter",377],[10,"FromIterator",2593],[5,"Challenge",938],[6,"Any",938],[10,"Neg",2589],[6,"Option",2600],[10,"Sub",2589],[10,"SyncDeps",377],[10,"Circuit",938],[1,"array"],[5,"V1Pass",341],[5,"V1",341],[5,"RegionShape",377],[6,"RegionColumn",377],[6,"Ordering",2588],[5,"HashSet",2601],[5,"Selector",938],[10,"Hasher",2602],[5,"MockProver",445],[6,"CellValue",445],[10,"FromUniformBytes",2587],[10,"Iterator",2603],[6,"FailureLocation",445],[5,"CircuitGates",445],[5,"CircuitLayout",445],[6,"VerifyFailure",445],[10,"PartialEq",2588],[5,"Error",2582],[5,"TracingFloorPlanner",445],[10,"FloorPlanner",938],[5,"Assembly",1664],[5,"Shift",2604],[5,"DrawingArea",2605],[6,"DrawingAreaErrorKind",2605],[10,"DrawingBackend",2606],[5,"Range",2607],[5,"CircuitCost",634],[10,"PrimeGroup",2608],[5,"MarginalProofSize",634],[5,"ProofSize",634],[5,"Poly",679],[5,"Lookup",679],[5,"Permutation",679],[5,"Shuffle",679],[10,"Deserializer",2609],[5,"ModelCircuit",679],[6,"CommitmentScheme",679],[5,"CostOptions",679],[10,"Serializer",2610],[5,"Column",823],[5,"Gate",823],[5,"Constraint",823],[5,"Region",823],[5,"VirtualCell",823],[1,"i32"],[5,"VirtualCell",938],[5,"HashMap",2611],[6,"Expression",938],[5,"BatchVerifier",938],[1,"u8"],[5,"ConstraintSystem",938],[10,"Phase",938],[5,"Rotation",1721],[10,"ColumnType",938],[5,"FixedQuery",938],[5,"AdviceQuery",938],[5,"InstanceQuery",938],[5,"Gate",938],[5,"VerifyingKey",938],[5,"ProvingKey",938],[5,"Constraint",938],[5,"VirtualCells",938],[10,"EncodedChallenge",2428],[10,"TranscriptWrite",2428],[10,"Default",2612],[8,"ParamsVerifierIPA",2017],[5,"PinnedConstraintSystem",938],[5,"FirstPhase",938],[5,"SecondPhase",938],[5,"ThirdPhase",938],[5,"Constraints",938],[6,"TableError",938],[5,"PinnedVerificationKey",938],[5,"Error",2613],[8,"Result",2613],[5,"EvaluationDomain",1721],[10,"Hash",2602],[10,"Transcript",2428],[10,"Params",1946],[17,"FloorPlanner"],[17,"Params"],[5,"Argument",1664],[5,"VerifyingKey",1664],[10,"Read",2614],[10,"Error",2615],[10,"CommitmentScheme",1946],[10,"Verifier",1946],[10,"VerificationStrategy",1721],[10,"TranscriptRead",2428],[10,"Write",2614],[10,"IndexedParallelIterator",2616],[5,"Polynomial",1721],[10,"Basis",1721],[5,"ProverQuery",1721],[5,"VerifierQuery",1721],[10,"MSM",1946],[5,"Coeff",1721],[5,"LagrangeCoeff",1721],[5,"ExtendedLagrangeCoeff",1721],[5,"PinnedEvaluationDomain",1721],[6,"Error",1721],[5,"RangeFrom",2607],[5,"RangeFull",2607],[5,"Blind",1946],[17,"ParamsVerifier"],[10,"ParamsProver",1946],[10,"ParamsVerifier",1946],[17,"MSM"],[10,"Prover",1946],[17,"Guard"],[17,"MSMAccumulator"],[10,"Guard",1721],[5,"ParamsIPA",2017],[5,"MSMIPA",2064],[5,"IPACommitmentScheme",2017],[5,"GuardIPA",2126],[5,"ProverIPA",2094],[5,"VerifierIPA",2094],[5,"Accumulator",2126],[5,"AccumulatorStrategy",2126],[5,"SingleStrategy",2126],[5,"ParamsKZG",2203],[10,"Engine",2617],[5,"MSMKZG",2254],[5,"KZGCommitmentScheme",2203],[5,"DualMSM",2254],[10,"MultiMillerLoop",2617],[5,"ProverGWC",2303],[5,"ProverSHPLONK",2303],[5,"VerifierGWC",2303],[5,"VerifierSHPLONK",2303],[5,"GuardKZG",2368],[5,"AccumulatorStrategy",2368],[5,"SingleStrategy",2368],[17,"Input"],[5,"ChallengeScalar",2428],[5,"Blake2bRead",2428],[5,"Keccak256Read",2428],[5,"Blake2bWrite",2428],[5,"Keccak256Write",2428],[5,"Challenge255",2428],[10,"TranscriptWriterBuffer",2428],[10,"TranscriptReadBuffer",2428],[15,"InRegion",609],[15,"OutsideRegion",609],[15,"ConstraintNotSatisfied",612],[15,"CellNotAssigned",612],[15,"InstanceCellNotAssigned",612],[15,"Permutation",612],[15,"ConstraintPoisoned",612],[15,"Lookup",612],[15,"Shuffle",612],[15,"NotEnoughRowsAvailable",1663]],"b":[[90,"impl-Add%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[91,"impl-Add%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[92,"impl-Add%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[93,"impl-Add%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[94,"impl-Add%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[95,"impl-Add%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[96,"impl-Add-for-%26Value%3CV%3E"],[97,"impl-Add%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[98,"impl-Add%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[99,"impl-Add-for-Value%3CV%3E"],[146,"impl-Value%3C%26mut+V%3E"],[147,"impl-Value%3C%26V%3E"],[154,"impl-Value%3C%26mut+V%3E"],[155,"impl-Value%3C%26V%3E"],[256,"impl-Mul%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[257,"impl-Mul%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[258,"impl-Mul-for-%26Value%3CV%3E"],[259,"impl-Mul%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[260,"impl-Mul%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[261,"impl-Mul%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[262,"impl-Mul%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[263,"impl-Mul-for-Value%3CV%3E"],[264,"impl-Mul%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[265,"impl-Mul%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[277,"impl-Sub-for-Value%3CV%3E"],[278,"impl-Sub%3CF%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[279,"impl-Sub%3CValue%3CV%3E%3E-for-%26Value%3CV%3E"],[280,"impl-Sub%3CValue%3C%26V%3E%3E-for-Value%3CV%3E"],[281,"impl-Sub%3CValue%3CF%3E%3E-for-Value%3C%26Assigned%3CF%3E%3E"],[282,"impl-Sub%3CValue%3CV%3E%3E-for-Value%3C%26V%3E"],[283,"impl-Sub%3C%26Value%3CV%3E%3E-for-Value%3CV%3E"],[284,"impl-Sub-for-%26Value%3CV%3E"],[285,"impl-Sub%3CValue%3CF%3E%3E-for-Value%3CAssigned%3CF%3E%3E"],[286,"impl-Sub%3CF%3E-for-Value%3CAssigned%3CF%3E%3E"],[419,"impl-From%3CColumn%3CAny%3E%3E-for-RegionColumn"],[421,"impl-From%3CSelector%3E-for-RegionColumn"],[526,"impl-Display-for-FailureLocation"],[527,"impl-Debug-for-FailureLocation"],[528,"impl-Debug-for-VerifyFailure"],[529,"impl-Display-for-VerifyFailure"],[530,"impl-Debug-for-CircuitGates"],[531,"impl-Display-for-CircuitGates"],[869,"impl-Debug-for-Column"],[870,"impl-Display-for-Column"],[871,"impl-Display-for-VirtualCell"],[872,"impl-Debug-for-VirtualCell"],[873,"impl-Display-for-Gate"],[874,"impl-Debug-for-Gate"],[875,"impl-Debug-for-Constraint"],[876,"impl-Display-for-Constraint"],[877,"impl-Display-for-Region"],[878,"impl-Debug-for-Region"],[880,"impl-From%3C(Any,+usize)%3E-for-Column"],[881,"impl-From%3CColumn%3CAny%3E%3E-for-Column"],[882,"impl-From%3C(S,+Column,+i32)%3E-for-VirtualCell"],[883,"impl-From%3C(Column,+i32)%3E-for-VirtualCell"],[885,"impl-From%3CVirtualCell%3E-for-VirtualCell"],[891,"impl-From%3C(usize,+%26str,+HashMap%3CColumn,+String%3E)%3E-for-Region"],[892,"impl-From%3C(usize,+String,+HashMap%3CColumn,+String%3E)%3E-for-Region"],[893,"impl-From%3C(usize,+String)%3E-for-Region"],[894,"impl-From%3C(usize,+%26str)%3E-for-Region"],[1006,"impl-Add%3CF%3E-for-Assigned%3CF%3E"],[1007,"impl-Add%3CAssigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[1008,"impl-Add%3C%26Assigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[1009,"impl-Add%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1010,"impl-Add-for-Assigned%3CF%3E"],[1011,"impl-Add%3CF%3E-for-%26Assigned%3CF%3E"],[1013,"impl-AddAssign-for-Assigned%3CF%3E"],[1014,"impl-AddAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1292,"impl-Display-for-Error"],[1293,"impl-Debug-for-Error"],[1294,"impl-Debug-for-TableError"],[1295,"impl-Display-for-TableError"],[1301,"impl-From%3C%26F%3E-for-Assigned%3CF%3E"],[1302,"impl-From%3CF%3E-for-Assigned%3CF%3E"],[1304,"impl-From%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1305,"impl-From%3C(F,+F)%3E-for-Assigned%3CF%3E"],[1306,"impl-From%3CColumn%3CInstance%3E%3E-for-Column%3CAny%3E"],[1307,"impl-From%3CColumn%3CAdvice%3E%3E-for-Column%3CAny%3E"],[1309,"impl-From%3CColumn%3CFixed%3E%3E-for-Column%3CAny%3E"],[1316,"impl-From%3CInstance%3E-for-Any"],[1317,"impl-From%3CFixed%3E-for-Any"],[1319,"impl-From%3CAdvice%3E-for-Any"],[1329,"impl-From%3CExpression%3CF%3E%3E-for-Constraint%3CF%3E"],[1331,"impl-From%3C(S,+Expression%3CF%3E)%3E-for-Constraint%3CF%3E"],[1436,"impl-Mul%3CF%3E-for-%26Assigned%3CF%3E"],[1437,"impl-Mul%3CF%3E-for-Assigned%3CF%3E"],[1438,"impl-Mul-for-Assigned%3CF%3E"],[1439,"impl-Mul%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1440,"impl-Mul-for-Expression%3CF%3E"],[1441,"impl-Mul%3CF%3E-for-Expression%3CF%3E"],[1442,"impl-MulAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1443,"impl-MulAssign-for-Assigned%3CF%3E"],[1445,"impl-Neg-for-Assigned%3CF%3E"],[1446,"impl-Neg-for-%26Assigned%3CF%3E"],[1502,"impl-Sub%3CAssigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[1503,"impl-Sub%3CF%3E-for-Assigned%3CF%3E"],[1504,"impl-Sub%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1505,"impl-Sub-for-Assigned%3CF%3E"],[1506,"impl-Sub%3C%26Assigned%3CF%3E%3E-for-%26Assigned%3CF%3E"],[1507,"impl-Sub%3CF%3E-for-%26Assigned%3CF%3E"],[1509,"impl-SubAssign-for-Assigned%3CF%3E"],[1510,"impl-SubAssign%3C%26Assigned%3CF%3E%3E-for-Assigned%3CF%3E"],[1539,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CInstance%3E"],[1541,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CAdvice%3E"],[1542,"impl-TryFrom%3CColumn%3CAny%3E%3E-for-Column%3CFixed%3E"],[1847,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-Polynomial%3CF,+B%3E"],[1848,"impl-Index%3CRangeFull%3E-for-Polynomial%3CF,+B%3E"],[1849,"impl-Index%3Cusize%3E-for-Polynomial%3CF,+B%3E"],[1850,"impl-IndexMut%3Cusize%3E-for-Polynomial%3CF,+B%3E"],[1851,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-Polynomial%3CF,+B%3E"],[1852,"impl-IndexMut%3CRangeFull%3E-for-Polynomial%3CF,+B%3E"],[1896,"impl-Sub%3CF%3E-for-%26Polynomial%3CF,+B%3E"],[1897,"impl-Sub%3C%26Polynomial%3CF,+B%3E%3E-for-Polynomial%3CF,+B%3E"],[1965,"impl-AddAssign%3CF%3E-for-Blind%3CF%3E"],[1966,"impl-AddAssign-for-Blind%3CF%3E"],[1993,"impl-MulAssign-for-Blind%3CF%3E"],[1994,"impl-MulAssign%3CF%3E-for-Blind%3CF%3E"],[2066,"impl-MSM%3CC%3E-for-MSMIPA%3C\'a,+C%3E"],[2067,"impl-MSMIPA%3C\'a,+C%3E"],[2347,"impl-ProverSHPLONK%3C\'a,+E%3E"],[2348,"impl-Prover%3C\'params,+KZGCommitmentScheme%3CE%3E%3E-for-ProverSHPLONK%3C\'params,+E%3E"],[2406,"impl-AccumulatorStrategy%3C\'params,+E%3E"],[2407,"impl-VerificationStrategy%3C\'params,+KZGCommitmentScheme%3CE%3E,+V%3E-for-AccumulatorStrategy%3C\'params,+E%3E"],[2408,"impl-SingleStrategy%3C\'params,+E%3E"],[2409,"impl-VerificationStrategy%3C\'params,+KZGCommitmentScheme%3CE%3E,+V%3E-for-SingleStrategy%3C\'params,+E%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
