var searchIndex = JSON.parse('{\
"halo2":{"doc":"halo2","t":[0,0,0,0,0,0,16,16,16,8,18,3,8,8,16,18,8,8,8,16,16,16,16,16,8,16,16,18,8,8,16,8,16,18,18,18,16,16,16,16,16,18,18,18,10,10,11,5,5,11,11,11,11,5,11,10,11,11,11,11,11,10,11,5,10,11,11,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,11,10,5,5,10,10,10,10,10,5,11,11,11,10,10,11,5,10,10,10,11,11,11,11,11,11,11,10,11,11,11,10,3,8,16,8,16,3,3,3,3,16,3,3,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,8,3,13,8,10,11,10,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,4,8,13,8,3,13,8,16,13,3,3,13,4,4,3,13,13,8,16,3,13,13,13,13,13,13,13,13,3,3,13,3,13,13,3,13,13,13,3,13,13,3,3,13,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,3,4,3,3,3,13,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,3,3,3,3,8,16,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11],"n":["arithmetic","circuit","dev","plonk","poly","transcript","AffineExt","Base","Base","BaseExt","CURVE_ID","Coordinates","CurveAffine","CurveExt","CurveExt","DELTA","Engine","Field","FieldExt","G1","G1Affine","G2","G2Affine","G2Prepared","Group","Gt","Gt","MODULUS","MillerLoopResult","MultiMillerLoop","Pair","PairingCurveAffine","PairingResult","RESCUE_ALPHA","RESCUE_INVALPHA","ROOT_OF_UNITY_INV","Result","Scalar","Scalar","ScalarExt","ScalarExt","TWO_INV","T_MINUS1_OVER2","ZETA","b","b","batch_invert","best_fft","best_multiexp","borrow","borrow_mut","clone","clone_into","compute_inner_product","conditional_select","coordinates","ct_is_zero","cube","default","deref","deref_mut","double","drop","eval_polynomial","final_exponentiation","fmt","from","from_bytes","from_bytes_wide","from_u128","from_xy","get_lower_128","group_add","group_scale","group_sub","group_zero","init","into","invert","is_on_curve","is_on_curve","is_zero","is_zero_vartime","jacobian_coordinates","kate_division","lagrange_interpolate","multi_miller_loop","new_jacobian","one","pairing","pairing_with","parallelize","pow","pow_vartime","rand","random","read","read","small_multiexp","sqrt","square","to_bytes","to_owned","try_from","try_into","type_id","u","v","vzip","write","write","x","y","zero","Cell","Chip","Config","Layouter","Loaded","NamespacedLayouter","Region","RegionIndex","RegionStart","Root","SimpleFloorPlanner","Table","assign_advice","assign_advice_from_constant","assign_advice_from_instance","assign_cell","assign_fixed","assign_region","assign_region","assign_table","assign_table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","config","constrain_constant","constrain_equal","constrain_instance","constrain_instance","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","floor_planner","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_root","get_root","init","init","init","init","init","init","init","into","into","into","into","into","into","into","layouter","loaded","namespace","ne","pop_namespace","pop_namespace","push_namespace","push_namespace","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","V1","V1Pass","assign_region","assign_table","borrow","borrow","borrow_mut","borrow_mut","constrain_instance","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_root","init","init","into","into","pop_namespace","push_namespace","synthesize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Column","RegionColumn","RegionLayouter","RegionShape","Selector","TableLayouter","assign_advice","assign_advice","assign_advice_from_constant","assign_advice_from_constant","assign_advice_from_instance","assign_advice_from_instance","assign_cell","assign_fixed","assign_fixed","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","columns","constrain_constant","constrain_constant","constrain_equal","constrain_equal","deref","deref","deref_mut","deref_mut","drop","drop","enable_selector","enable_selector","eq","fmt","fmt","from","from","from","from","hash","init","init","into","into","ne","new","partial_cmp","region_index","row_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Cell","CircuitGates","ConstraintNotSatisfied","ConstraintPoisoned","Lookup","MockProver","Permutation","VerifyFailure","assign_advice","assign_fixed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect","copy","cost","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","enable_selector","enter_region","eq","exit_region","fill_from_row","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","metadata","ne","pop_namespace","push_namespace","queries_to_csv","query_instance","run","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","cell_values","column","column","constraint","constraint","gate","lookup_index","offset","region","row","row","row","CircuitCost","MarginalProofSize","ProofSize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","marginal_proof_size","measure","proof_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Column","Constraint","Gate","Region","VirtualCell","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmp","cmp","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Advice","Advice","Advice","Any","Assigned","Assignment","BoundsFailure","Circuit","Column","ColumnNotInPermutation","ColumnType","Config","Constant","Constraint","ConstraintSystem","ConstraintSystemFailure","Error","Expression","Fixed","Fixed","Fixed","FloorPlanner","FloorPlanner","Instance","Instance","Instance","InstanceTooLarge","InvalidInstances","Negated","NotEnoughColumnsForConstants","NotEnoughRowsAvailable","Opening","PinnedConstraintSystem","PinnedVerificationKey","Product","ProvingKey","Rational","Scaled","Selector","Selector","Sum","Synthesis","TableColumn","Transcript","Trivial","VerifyingKey","VirtualCells","Zero","add","add","add","advice_column","assign_advice","assign_fixed","blinding_factors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complex_selector","configure","copy","create_gate","create_proof","default","degree","degree","denominator","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","enable_constant","enable_equality","enable_selector","enter_region","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","exit_region","fill_from_row","fixed_column","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_domain","get_vk","hash","hash","hash","hash","hash","hash","hash","hash_into","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","instance_column","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invert","is_simple","keygen_pk","keygen_vk","lookup","lookup_table_column","minimum_rows","mul","mul","mul","mul","ne","ne","ne","neg","neg","numerator","partial_cmp","partial_cmp","pinned","pinned","pop_namespace","push_namespace","query_advice","query_any","query_fixed","query_instance","query_instance","query_selector","read","selector","set_minimum_degree","source","square","sub","sub","sub","synthesize","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_proof","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","without_witnesses","write","0","0","1","0","0","current_k","0","0","0","0","0","0","1","1","1","column_index","column_index","column_index","query_index","query_index","query_index","rotation","rotation","rotation","0","Basis","Coeff","Error","EvaluationDomain","ExtendedLagrangeCoeff","LagrangeCoeff","OpeningError","PinnedEvaluationDomain","Polynomial","Rotation","SamplingError","add","add_extended","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coeff_from_vec","coeff_to_extended","commitment","constant_extended","constant_lagrange","cur","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","divide_by_vanishing_poly","drop","drop","drop","drop","drop","drop","drop","drop","empty_coeff","empty_extended","empty_lagrange","eq","extended_len","extended_to_coeff","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_extended_omega","get_omega","get_omega_inv","get_quotient_poly_degree","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","iter","iter_mut","l_i_range","lagrange_from_vec","lagrange_to_coeff","mul","mul","mul_extended","multiopen","ne","neg","new","next","num_coeffs","one_minus","pinned","prev","rotate","rotate_extended","rotate_omega","sub","sub_extended","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","Blind","Params","ParamsVerifier","Setup","add","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit","commit_lagrange","commit_lagrange","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","empty_msm","empty_msm","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_g","init","init","init","init","into","into","into","into","mul","mul_assign","mul_assign","ne","new","public_inputs_size","read","read","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verifier_params","vzip","vzip","vzip","vzip","write","write","ProverQuery","VerifierQuery","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_proof","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","new_commitment","new_msm","point","poly","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_proof","vzip","vzip","Blake2bRead","Blake2bWrite","Challenge255","ChallengeScalar","EncodedChallenge","Input","Transcript","TranscriptRead","TranscriptWrite","as_challenge_scalar","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","common_point","common_point","common_point","common_scalar","common_scalar","common_scalar","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","finalize","fmt","fmt","fmt","fmt","from","from","from","from","get_scalar","get_scalar","init","init","init","init","init","init","into","into","into","into","new","new","read_point","read_point","read_scalar","read_scalar","squeeze_challenge","squeeze_challenge","squeeze_challenge","squeeze_challenge_scalar","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_point","write_point","write_scalar","write_scalar"],"q":["halo2","","","","","","halo2::arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit::floor_planner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit::layouter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::circuit::layouter::RegionColumn","","halo2::dev","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::dev::VerifyFailure","","","","","","","","","","","","halo2::dev::cost","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::dev::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::plonkhalo2::plonk::Assigned","","","halo2::plonk::Error","","","halo2::plonk::Expression","","","","","","","","","","","","","","","","","","halo2::poly","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::poly::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::poly::multiopen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2::transcript","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module provides common utilities, traits and …","Traits and structs for implementing circuit components.","Tools for developing circuits.","This module provides an implementation of a variant of …","Contains utilities for performing arithmetic over …","This module contains utilities and traits for dealing with …","The affine version of the curve","The base field over which this elliptic curve is …","The base field over which this elliptic curve is …","This trait is a common interface for dealing with elements …","CURVE_ID used for hash-to-curve.","The affine coordinates of a point on an elliptic curve.","This trait is the affine counterpart to <code>Curve</code> and is used …","This trait is a common interface for dealing with elements …","The projective form of the curve","Generator of the $t-order$ multiplicative subgroup","","This trait represents an element of a field.","","The projective representation of an element in G1.","The affine representation of an element in G1.","The projective representation of an element in G2.","The affine representation of an element in G2.","The prepared form of <code>Self::G2Affine</code>.","This represents an element of a group with basic …","The extension field that hosts the target group of the …","The extension field that hosts the target group of the …","Modulus of the field written as a string for display …","Represents results of a Miller loop, one of the most …","An engine that can compute sums of pairings in an …","","Affine representation of an elliptic curve point that can …","","Ideally the smallest prime $\\\\alpha$ such that gcd($p - 1$, …","$RESCUE_INVALPHA \\\\cdot RESCUE_ALPHA = 1 \\\\mod p - 1$ such …","Inverse of <code>ROOT_OF_UNITY</code>","The type returned by <code>Engine::miller_loop</code>.","This is the scalar field of the engine’s groups.","The group is assumed to be of prime order $p$. <code>Scalar</code> is …","The scalar field of this elliptic curve.","The scalar field of this elliptic curve.","Inverse of $2$ in the field.","The value $(T-1)/2$ such that $2^S \\\\cdot T = p - 1$ with …","Element of multiplicative order $3$.","Returns the curve constant a. Returns the curve constant b.","Returns the curve constant $b$.","Performs a batch inversion using Montgomery’s trick, …","Performs a radix-$2$ Fast-Fourier Transformation (FFT) on …","Performs a multi-exponentiation operation.","","","","","This computes the inner product of two vectors <code>a</code> and <code>b</code>.","","Gets the coordinates of this point.","Returns whether or not this element is zero.","Cubes this element.","","","","Doubles this element.","","This evaluates a provided polynomial (in coefficient form) …","This performs a “final exponentiation” routine to …","","","Attempts to obtain a field element from its normalized, …","Obtains a field element that is congruent to the provided …","Obtains a field element congruent to the integer <code>v</code>.","Obtains a point given $(x, y)$, failing if it is not on the","Gets the lower 128 bits of this field element when …","Adds <code>rhs</code> to this group element.","Scales this group element by a scalar.","Subtracts <code>rhs</code> from this group element.","Returns the additive identity of the group.","","","Computes the multiplicative inverse of this element, …","Returns whether or not this element is on the curve; should","Returns whether or not this element is on the curve; should","Returns true iff this element is zero.","Returns true iff this element is zero.","Apply the curve endomorphism by multiplying the …","Divides polynomial <code>a</code> in <code>X</code> by <code>X - b</code> with no remainder.","Returns coefficients of an n - 1 degree polynomial given a …","Computes $$\\\\sum_{i=1}^n \\\\textbf{ML}(a_i, b_i)$$ given a …","Obtains a point given Jacobian coordinates $X : Y : Z$, …","Returns the one element of the field, the multiplicative …","Invoke the pairing function <code>G1 x G2 -&gt; Gt</code> without the use …","Perform a pairing","This simple utility function will parallelize an operation …","Exponentiates <code>self</code> by <code>by</code>, where <code>by</code> is a little-endian order","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","This computes a random element of the field using system …","Returns an element chosen uniformly at random using a …","Reads a normalized, little endian represented field …","Reads a compressed element from the buffer and attempts to …","Performs a small multi-exponentiation operation. Uses the …","Returns the square root of the field element, if it is …","Squares this element.","Converts this field element to its normalized, little …","","","","","Returns the u-coordinate.","Returns the v-coordinate.","","Writes this element in its normalized, little endian form …","Writes an element in compressed form to the buffer.","Returns the x-coordinate.","Returns the y-coordinate.","Returns the zero element of the field, the additive …","A pointer to a cell within a circuit.","A chip implements a set of instructions that can be used …","A type that holds the configuration for this chip, and any …","A layout strategy within a circuit. The layouter is …","A type that holds any general chip state that needs to be …","This is a “namespaced” layouter which borrows a …","A region of the circuit in which a <code>Chip</code> can assign cells.","Index of a region in a layouter","Starting row of a region in a layouter","Represents the type of the “root” of this layouter, so …","A simple <code>FloorPlanner</code> that performs minimal optimizations.","A lookup table in the circuit.","Assign an advice column value (witness).","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","Assign the value of the instance column’s cell at …","Assigns a fixed value to a table cell.","Assign a fixed value.","Assign a region of gates to an absolute row number.","","Assign a table region to an absolute row number.","","","","","","","","","","","","","","","","","","","","","","The chip holds its own configuration.","Constrains a cell to have a constant value.","Constrains two cells to have the same value.","Constrains a <code>Cell</code> to equal an instance column’s row …","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementations of common circuit floor planners.","","","","","","","","","","","","","","","","","","","Gets the “root” of this assignment, bypassing the …","","","","","","","","","","","","","","","","Implementations of common circuit layouters.","Provides access to general chip state loaded at the …","Enters into a namespace.","","Exits out of the existing namespace.","","Creates a new (sub)namespace and enters into it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version 1 <code>FloorPlanner</code> provided by <code>halo2</code>.","A single pass of the <code>V1</code> layouter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concrete column","The virtual column involved in a region. This includes …","Helper trait for implementing a custom <code>Layouter</code>.","The shape of a region. For a region at a certain index, we …","Virtual column representing a (boolean) selector","Helper trait for implementing a custom <code>Layouter</code>.","Assign an advice column value (witness)","","Assigns a constant value to the column <code>advice</code> at <code>offset</code> …","","Assign the value of the instance column’s cell at …","","Assigns a fixed value to a table cell.","Assign a fixed value","","","","","","","","","","","Get a reference to the set of <code>columns</code> used in a <code>RegionShape</code>…","Constrains a cell to have a constant value.","","Constraint two cells to have the same value.","","","","","","","","Enables a selector at the given offset.","","","","","","","","","","","","","","","Create a new <code>RegionShape</code> for a region at <code>region_index</code>.","","Get the <code>region_index</code> of a <code>RegionShape</code>.","Get the <code>row_count</code> of a <code>RegionShape</code>.","","","","","","","","","","","","","A cell used in an active gate was not assigned to.","A struct for collecting and displaying the gates within a …","A constraint was not satisfied for a particular row.","A constraint was active on an unusable row, and is likely …","A lookup input did not exist in its corresponding table.","A test prover for debugging circuits.","A permutation did not preserve the original value of a …","The reasons why a particular circuit is not satisfied.","","","","","","","","","Collects the gates from within the circuit.","","Developer tools for investigating the cost of a circuit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about circuits.","","","","Prints the queries in this circuit to a CSV grid.","","Runs a synthetic keygen-and-prove operation on the given …","","","","","","","","","","","","Returns <code>Ok(())</code> if this <code>MockProver</code> is satisfied, or a list …","","","","The values of the virtual cells used by this constraint.","The column in which this cell should be assigned.","The column in which this permutation is not satisfied.","The polynomial constraint that is not satisfied.","The polynomial constraint that is not satisfied.","The index of the active gate.","The index of the lookup that is not satisfied. These …","The offset (relative to the start of the region) at which …","The region in which this cell should be assigned.","The row on which this constraint is not satisfied.","The row on which this lookup is not satisfied.","The row on which this permutation is not satisfied.","Measures a circuit to determine its costs, and explain …","The marginal size of a Halo 2 proof, broken down into its …","The size of a Halo 2 proof, broken down into its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the marginal proof size per instance of this …","Measures a circuit with parameter constant <code>k</code>.","Returns the proof size for the given number of instances …","","","","","","","","","","","","","Metadata about a column within a circuit.","Metadata about a configured constraint within a circuit.","Metadata about a configured gate within a circuit.","Metadata about an assigned region within a circuit.","A “virtual cell” is a PLONK cell that has been queried …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An advice column","An Advice variant","This is an advice (witness) column queried at a certain …","An enum over the Advice, Fixed, Instance structs","A value assigned to a cell within a circuit.","This trait allows a <code>Circuit</code> to direct some backend to …","Out of bounds index passed to a backend","This is a trait that circuits provide implementations for …","A column with an index and type","The instance sets up a copy constraint involving a column …","A column type","This is a configuration object that stores things like …","This is a constant polynomial","An individual polynomial constraint.","This is a description of the circuit environment, such as …","The constraint system is not satisfied.","This is an error that could occur during proving or …","Low-degree expression representing an identity that must …","A fixed column","A Fixed variant","This is a fixed column queried at a certain relative …","A floor planning strategy for a circuit.","The floor planner used for this circuit. This is an …","An instance column","An Instance variant","This is an instance (external) column queried at a certain …","Instance provided exceeds number of available rows","The provided instances do not match the circuit parameters.","This is a negated polynomial","Circuit synthesis requires global constants, but circuit …","<code>k</code> is too small for the given circuit.","Opening error","Represents the minimal parameters that determine a …","Minimal representation of a verification key that can be …","This is the product of two polynomials","This is a proving key which allows for the creation of …","A value stored as a fraction to enable batch inversion.","This is a scaled polynomial","A selector, representing a fixed boolean value per row of …","This is a virtual selector","This is the sum of two polynomials","This is an error that can occur during synthesis of the …","A fixed column of a lookup table.","Transcript error","A value that does not require inversion to evaluate.","This is a verifying key which allows for the verification …","Exposes the “virtual cells” that can be queried while …","The field element zero.","","","","Allocate a new advice column","Assign an advice column value (witness)","Assign a fixed value","Compute the number of blinding factors necessary to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a new complex selector that can appear anywhere …","The circuit is given an opportunity to describe the exact …","Assign two cells to have the same value","Creates a new gate.","This creates a proof for the provided <code>circuit</code> when given …","","Compute the degree of this polynomial","Compute the degree of the constraint system (the maximum …","Returns the denominator, if non-trivial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable this selector at the given offset within the given …","Enables this fixed column to be used for global constant …","Enable the ability to enforce equality over cells in this …","Enables a selector at the given row.","Creates a new region and enters into it.","","","","","","","","Evaluates this assigned value directly, performing an …","Evaluate the polynomial using the provided closures to …","Exits the current region.","Fills a fixed <code>column</code> starting from the given <code>row</code> with …","Allocate a new fixed column","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the underlying <code>EvaluationDomain</code>.","Get the underlying <code>VerifyingKey</code>.","","","","","","","","Hashes a verification key into a transcript.","","","","","","","","","","","","","","","","","","Allocate a new instance column","","","","","","","","","","","","","","","","","","Inverts this assigned value.","Is this selector “simple”? Simple selectors can only …","Generate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.","Add a lookup argument for some input expressions and table …","Allocates a new fixed column that can be used in a lookup …","Returns the minimum necessary rows that need to exist in …","","","","","","","","","","Returns the numerator.","","","Obtain a pinned version of this constraint system; a …","Obtains a pinned representation of this verification key …","Exits out of the existing namespace.","Creates a new (sub)namespace and enters into it.","Query an advice column at a relative position","Query an Any column at a relative position","Query a fixed column at a relative position","Queries the cell of an instance column at a particular …","Query an instance column at a relative position","Query a selector at the current position.","Reads a verification key from a buffer.","Allocate a new (simple) selector. Simple selectors cannot …","Sets the minimum degree required by the circuit, which can …","","Square this expression.","","","","Given the provided <code>cs</code>, synthesize the given circuit.","Given the provided <code>cs</code>, synthesize the circuit. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boolean indicating whether or not the proof is …","","","","","","","","","","","","","","","","","","Returns a copy of this circuit with no witness values …","Writes a verifying key to a buffer.","","","","","","The current value of <code>k</code> being used.","","","","","","","","","","Column index","Column index","Column index","Query index","Query index","Query index","Rotation of this query","Rotation of this query","Rotation of this query","","The basis over which a polynomial is described.","The polynomial is defined as coefficients","This is an error that could occur during proving or …","This structure contains precomputed constants and other …","The polynomial is defined as coefficients of Lagrange …","The polynomial is defined as coefficients of Lagrange …","OpeningProof is not well-formed","Represents the minimal parameters that determine an …","Represents a univariate polynomial defined over a field …","Describes the relative rotation of a vector. Negative …","Caller needs to re-sample a point","","Add two polynomials in the extended domain, rotating the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtains a polynomial in coefficient form when given a …","This takes us from an n-length coefficient vector into a …","This module contains an implementation of the polynomial …","Returns a constant polynomial in the extended Lagrange …","Returns a constant polynomial in the Lagrange coefficient …","The current location in the evaluation domain","","","","","","","","","","","","","","","","","","","","This divides the polynomial (in the extended domain) by …","","","","","","","","","Returns an empty (zero) polynomial in the coefficient basis","Returns an empty (zero) polynomial in the extended …","Returns an empty (zero) polynomial in the Lagrange …","","Get the size of the extended domain","This takes us from the extended evaluation domain and gets …","","","","","","","","","","","","","","","","","Get the generator of the extended domain’s …","Get $\\\\omega$, the generator of the $2^k$ order …","Get $\\\\omega^{-1}$, the inverse of the generator of the …","Gets the quotient polynomial’s degree (as a multiple of …","","","","","","","","","","","","","","","","","","","","","","","Iterate over the values, which are either in coefficient …","Iterate over the values mutably, which are either in …","Computes evaluations (at the point <code>x</code>, where <code>xn = x^n</code>) of …","Obtains a polynomial in Lagrange form when given a vector …","This takes us from an n-length vector into the coefficient …","","","Multiply two polynomials in the extended domain, rotating …","This module contains an optimisation of the polynomial …","","","This constructs a new evaluation domain object based on …","The next location in the evaluation domain","Gets the size of this polynomial in terms of the number of …","Maps every coefficient <code>c</code> in <code>p</code> to <code>1 - c</code>.","Obtain a pinned version of this evaluation domain; a …","The previous location in the evaluation domain","Rotates the values in a Lagrange basis polynomial by …","Rotate the extended domain polynomial over the original …","Multiplies a value by some power of $\\\\omega$, essentially …","","Subtract a polynomial from another in the extended domain, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type around a blinding factor.","These are the public parameters for the polynomial …","These are the public parameters for the polynomial …","Help to specify the engine we use to generate parameters","","","","","","","","","","","","","","This computes a commitment to a polynomial described by …","This commits to a polynomial using its evaluations over …","This commits to a polynomial using its evaluations over …","","","","","","","","","","","","","","Generates an empty multiscalar multiplication struct using …","Generates an empty multiscalar multiplication struct using …","","","","","","","","","","Getter for g generators","","","","","","","","","","","","","Initializes parameters for the curve, given a random …","Returns maximum public input size allowed","Reads params from a buffer.","Reads params from a buffer.","","","","","","","","","","","","","","Returns verifier params with size of lagrage bases equal …","","","","","Writes params to a buffer.","Writes params to a buffer.","A polynomial query at a point","A polynomial query at a point","","","","","","","","","Create a multi-opening proof","","","","","","","","","","","","","","","Create a new verifier query based on a commitment","Create a new verifier query based on a linear combination …","point at which polynomial is queried","coefficients of polynomial","","","","","","","","","Verify a multi-opening proof","","","We will replace BLAKE2b with an algebraic hash function in …","We will replace BLAKE2b with an algebraic hash function in …","A 255-bit challenge.","The scalar representation of a verifier challenge.","<code>EncodedChallenge&lt;C&gt;</code> defines a challenge encoding with a …","The Input type used to derive the challenge encoding. For …","Generic transcript view (from either the prover or verifier…","Transcript view from the perspective of a verifier that …","Transcript view from the perspective of a prover that has …","Cast an encoded challenge as a typed <code>ChallengeScalar</code>.","","","","","","","","","","","","","","","","","Writing the point to the transcript without writing it to …","","","Writing the scalar to the transcript without writing it to …","","","","","","","","","","","","","","","","","Conclude the interaction and return the output buffer …","","","","","","","","","Get a scalar field element from an encoded challenge.","","Initialize a transcript given an input buffer.","","Initialize a transcript given an output buffer.","","","","","","","","Get an encoded challenge from a given input challenge.","","Read a curve point from the prover.","","Read a curve scalar from the prover.","","Squeeze an encoded verifier challenge from the transcript.","","","Squeeze a typed challenge (in the scalar field) from the …","","","","","","","","","","","","","","","","","","","","","Write a curve point to the proof and the transcript.","","Write a scalar to the proof and the transcript.",""],"i":[0,0,0,0,0,0,1,1,2,0,1,0,0,0,2,3,0,0,0,4,4,4,4,5,0,4,6,7,0,0,8,0,8,3,3,3,5,4,9,1,2,3,3,3,1,2,7,0,0,10,10,10,10,0,10,2,7,11,10,10,10,11,10,0,6,10,10,3,7,3,2,3,9,9,9,9,10,10,11,1,2,11,11,1,0,0,5,1,11,4,8,0,7,11,7,11,7,2,0,11,11,3,10,10,10,10,10,10,10,7,2,10,10,11,0,0,12,0,12,0,0,0,0,13,0,0,14,14,14,15,14,13,16,13,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,18,19,20,18,19,20,12,14,14,13,16,17,18,18,19,19,20,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,16,19,0,17,18,19,20,14,15,16,17,18,18,19,19,20,14,14,15,15,16,13,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,0,12,13,19,13,16,13,16,17,18,19,20,17,18,19,20,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,17,18,19,20,14,15,16,0,0,21,21,22,21,22,21,21,22,21,22,21,22,21,22,21,22,21,21,22,21,22,21,21,21,22,22,21,22,21,22,21,22,21,23,0,0,0,23,0,24,25,24,25,24,25,26,24,25,25,23,25,23,25,23,25,23,23,25,24,25,24,25,25,23,25,23,25,23,24,25,23,25,23,25,23,23,23,23,25,23,25,23,23,25,23,25,25,25,23,25,23,25,23,25,23,25,23,27,28,29,0,29,29,29,0,29,0,30,30,31,29,30,31,29,30,31,30,0,31,29,30,31,29,30,31,29,30,30,30,29,30,30,31,31,29,29,30,31,29,30,31,29,30,31,29,30,0,29,30,30,31,30,30,31,29,31,29,30,31,29,30,31,29,30,30,31,29,30,32,33,34,32,35,33,36,33,33,32,36,34,0,0,0,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,37,37,37,38,39,37,38,39,37,38,39,37,38,39,0,0,0,0,0,40,41,42,43,44,40,41,42,43,44,40,41,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,40,41,41,42,42,43,43,44,44,40,40,40,41,41,41,42,42,43,43,44,44,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,41,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,0,45,46,0,0,0,47,0,0,47,0,48,46,0,0,47,0,0,0,45,46,0,48,0,45,46,47,47,46,47,47,47,0,0,46,0,49,46,0,46,46,47,0,47,49,0,0,49,49,49,46,50,51,51,50,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,50,52,53,54,55,45,56,57,49,46,50,52,45,50,48,51,50,0,50,46,50,49,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,56,50,50,51,51,52,53,54,55,45,56,57,49,46,51,51,50,52,53,54,55,45,56,57,49,46,58,50,59,60,47,47,61,62,63,52,52,52,52,53,54,55,45,45,45,45,56,57,49,49,49,46,58,58,58,50,59,60,47,47,61,62,63,61,63,52,53,54,55,45,56,57,61,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,50,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,49,56,0,0,50,50,50,49,49,46,46,52,56,57,49,46,49,52,45,50,61,51,51,60,60,60,51,60,60,61,50,50,47,46,49,49,46,64,48,52,53,54,55,45,56,57,49,46,50,47,52,52,52,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,0,52,53,54,55,45,56,57,49,46,58,50,59,60,47,61,62,63,48,61,65,66,66,67,68,69,70,71,72,73,74,75,73,74,75,76,77,78,76,77,78,76,77,78,79,0,0,0,0,0,0,80,0,0,0,80,81,82,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,84,85,86,81,79,84,85,86,81,79,82,82,0,82,82,79,79,82,83,80,84,85,86,81,81,79,82,83,80,84,85,86,81,81,79,82,82,83,80,84,85,86,81,79,82,82,82,79,82,82,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,82,82,82,82,81,81,81,81,81,81,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,81,81,82,82,82,81,81,82,0,79,81,82,79,81,81,82,79,81,82,82,81,82,84,85,86,81,79,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,82,83,80,84,85,86,81,79,87,0,0,0,0,87,87,87,88,89,90,87,88,89,90,87,87,87,88,88,89,87,88,89,90,87,88,89,90,87,88,89,90,87,88,89,87,88,89,90,87,88,89,90,87,88,88,89,90,87,88,89,90,87,87,87,87,87,90,89,88,89,87,88,89,90,87,88,89,90,87,88,89,90,87,90,88,89,90,87,88,89,0,0,91,92,91,92,91,92,91,92,0,91,92,91,92,91,92,91,92,91,92,91,92,91,92,92,92,91,91,91,92,91,92,91,92,91,92,0,91,92,0,0,0,0,0,93,0,0,0,93,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,98,94,95,98,94,95,94,95,96,96,97,97,94,95,96,97,94,95,96,97,95,94,95,96,97,94,95,96,97,93,97,94,94,95,95,96,97,94,95,96,97,93,97,99,94,99,94,98,94,95,98,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,94,95,96,97,100,95,100,95],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[],["coordinates",3]],[[]],[[],["field",8]],[[["coordinates",3],["coordinates",3],["choice",3]],["coordinates",3]],[[],["ctoption",3,[["coordinates",3]]]],[[],["choice",3]],[[]],[[],["coordinates",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["field",8]],["field",8]],[[]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["ctoption",3]],[[]],[[["u128",15]]],[[],["ctoption",3]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["ctoption",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["bool",15]],[[]],[[["intoiterator",8],["field",8]],["vec",3,[["field",8]]]],[[],["vec",3,[["fieldext",8]]]],[[]],[[],["ctoption",3]],[[]],[[]],[[]],[[["",26,[["fn",8],["send",8],["sync",8],["clone",8]]]]],[[]],[[]],[[]],[[]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[]],[[],["ctoption",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["column",3,[["advice",3]]],["usize",15]],["result",4,[["cell",3],["error",4]]]],[[["column",3,[["advice",3]]],["usize",15]],["result",4,[["cell",3],["error",4]]]],[[["column",3,[["instance",3]]],["usize",15],["column",3,[["advice",3]]],["usize",15]],["result",4,[["error",4]]]],[[["tablecolumn",3],["usize",15]],["result",4,[["error",4]]]],[[["column",3,[["fixed",3]]],["usize",15]],["result",4,[["cell",3],["error",4]]]],[[],["result",4,[["error",4]]]],[[],["result",4,[["error",4]]]],[[],["result",4,[["error",4]]]],[[],["result",4,[["error",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["regionindex",3]],[[],["regionstart",3]],[[],["cell",3]],[[]],[[]],[[]],[[]],[[["cell",3]],["result",4,[["error",4]]]],[[["cell",3],["cell",3]],["result",4,[["error",4]]]],[[["cell",3],["column",3,[["instance",3]]],["usize",15]],["result",4,[["error",4]]]],[[["cell",3],["column",3,[["instance",3]]],["usize",15]],["result",4,[["error",4]]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["regionstart",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["regionindex",3]],[[]],[[["usize",15]],["regionstart",3]],[[]],[[]],[[["regionlayouter",8]]],[[]],[[]],[[["tablelayouter",8]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["namespacedlayouter",3]],[[["regionstart",3]],["bool",15]],[[["option",4,[["string",3]]]]],[[["option",4,[["string",3]]]]],[[]],[[]],[[["vec",3,[["column",3,[["fixed",3]]]]]],["result",4,[["error",4]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4,[["error",4]]]],[[],["result",4,[["error",4]]]],[[]],[[]],[[]],[[]],[[["cell",3],["column",3,[["instance",3]]],["usize",15]],["result",4,[["error",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["option",4,[["string",3]]]]],[[]],[[["vec",3,[["column",3,[["fixed",3]]]]]],["result",4,[["error",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,[[["fn",8],["column",3,[["advice",3]]],["usize",15],["fnmut",8]],["result",4,[["cell",3],["error",4]]]],[[["fn",8],["column",3,[["advice",3]]],["usize",15],["fnmut",8]],["result",4,[["cell",3],["error",4]]]],[[["fn",8],["column",3,[["advice",3]]],["usize",15],["assigned",4]],["result",4,[["cell",3],["error",4]]]],[[["fn",8],["column",3,[["advice",3]]],["usize",15],["assigned",4]],["result",4,[["cell",3],["error",4]]]],[[["fn",8],["column",3,[["instance",3]]],["usize",15],["column",3,[["advice",3]]],["usize",15]],["result",4,[["error",4]]]],[[["fn",8],["column",3,[["instance",3]]],["usize",15],["column",3,[["advice",3]]],["usize",15]],["result",4,[["error",4]]]],[[["fn",8],["tablecolumn",3],["usize",15],["fnmut",8]],["result",4,[["error",4]]]],[[["fn",8],["column",3,[["fixed",3]]],["usize",15],["fnmut",8]],["result",4,[["cell",3],["error",4]]]],[[["fn",8],["column",3,[["fixed",3]]],["usize",15],["fnmut",8]],["result",4,[["cell",3],["error",4]]]],[[]],[[]],[[]],[[]],[[],["regionshape",3]],[[],["regioncolumn",4]],[[]],[[]],[[],["ordering",4]],[[],["hashset",3]],[[["cell",3],["assigned",4]],["result",4,[["error",4]]]],[[["cell",3],["assigned",4]],["result",4,[["error",4]]]],[[["cell",3],["cell",3]],["result",4,[["error",4]]]],[[["cell",3],["cell",3]],["result",4,[["error",4]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["fn",8],["selector",3],["usize",15]],["result",4,[["error",4]]]],[[["fn",8],["selector",3],["usize",15]],["result",4,[["error",4]]]],[[["regioncolumn",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["column",3,[["any",4]]]],["regioncolumn",4]],[[["selector",3]],["regioncolumn",4]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["regioncolumn",4]],["bool",15]],[[["regionindex",3]]],[[],["option",4,[["ordering",4]]]],[[],["regionindex",3]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["column",3,[["advice",3]]],["usize",15]],["result",4,[["error",4]]]],[[["column",3,[["fixed",3]]],["usize",15]],["result",4,[["error",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["column",3,[["any",4]]],["usize",15],["column",3,[["any",4]]],["usize",15]],["result",4,[["error",4]]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["selector",3],["usize",15]],["result",4,[["error",4]]]],[[]],[[["verifyfailure",4]],["bool",15]],[[]],[[["column",3,[["fixed",3]]],["usize",15],["option",4,[["assigned",4]]]],["result",4,[["error",4]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,[[["verifyfailure",4]],["bool",15]],[[["option",4,[["string",3]]]]],[[]],[[],["string",3]],[[["column",3,[["instance",3]]],["usize",15]],["result",4,[["option",4],["error",4]]]],[[["u32",15],["vec",3,[["vec",3]]]],["result",4,[["error",4]]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["vec",3,[["verifyfailure",4]]]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["marginalproofsize",3]],[[["usize",15]]],[[["usize",15]],["proofsize",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["column",3]],["ordering",4]],[[["virtualcell",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["column",3]],["bool",15]],[[["virtualcell",3]],["bool",15]],[[["gate",3]],["bool",15]],[[["constraint",3]],["bool",15]],[[["region",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["column",3,[["any",4]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[["column",3]],["bool",15]],[[["virtualcell",3]],["bool",15]],[[["gate",3]],["bool",15]],[[["constraint",3]],["bool",15]],[[["region",3]],["bool",15]],[[["column",3]],["option",4,[["ordering",4]]]],[[["virtualcell",3]],["option",4,[["ordering",4]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["assigned",4]],["assigned",4]],[[],["assigned",4]],[[["expression",4]],["expression",4]],[[],["column",3,[["advice",3]]]],[[["column",3,[["advice",3]]],["usize",15]],["result",4,[["error",4]]]],[[["column",3,[["fixed",3]]],["usize",15]],["result",4,[["error",4]]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["column",3]],[[],["advice",3]],[[],["fixed",3]],[[],["instance",3]],[[],["any",4]],[[],["selector",3]],[[],["tablecolumn",3]],[[],["assigned",4]],[[],["expression",4]],[[],["constraintsystem",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["selector",3]],[[["constraintsystem",3]]],[[["column",3,[["any",4]]],["usize",15],["column",3,[["any",4]]],["usize",15]],["result",4,[["error",4]]]],[[["str",15]]],[[["params",3],["provingkey",3]],["result",4,[["error",4]]]],[[],["constraintsystem",3]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["region",3],["usize",15]],["result",4,[["error",4]]]],[[["column",3,[["fixed",3]]]]],[[["column",3,[["any",4]]]]],[[["selector",3],["usize",15]],["result",4,[["error",4]]]],[[]],[[["column",3]],["bool",15]],[[["advice",3]],["bool",15]],[[["fixed",3]],["bool",15]],[[["instance",3]],["bool",15]],[[["any",4]],["bool",15]],[[["selector",3]],["bool",15]],[[["tablecolumn",3]],["bool",15]],[[]],[[]],[[]],[[["column",3,[["fixed",3]]],["usize",15],["option",4,[["assigned",4]]]],["result",4,[["error",4]]]],[[],["column",3,[["fixed",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["column",3,[["fixed",3]]]],["column",3,[["any",4]]]],[[["column",3,[["instance",3]]]],["column",3,[["any",4]]]],[[["column",3,[["advice",3]]]],["column",3,[["any",4]]]],[[]],[[]],[[]],[[]],[[["advice",3]],["any",4]],[[]],[[["fixed",3]],["any",4]],[[["instance",3]],["any",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]]],[[]],[[]],[[]],[[]],[[["error",3]]],[[]],[[]],[[]],[[],["evaluationdomain",3]],[[],["verifyingkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["column",3,[["instance",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["params",3],["verifyingkey",3]],["result",4,[["provingkey",3],["error",4]]]],[[["params",3]],["result",4,[["verifyingkey",3],["error",4]]]],[[],["usize",15]],[[],["tablecolumn",3]],[[],["usize",15]],[[["assigned",4]],["assigned",4]],[[],["assigned",4]],[[["expression",4]],["expression",4]],[[],["expression",4]],[[["column",3]],["bool",15]],[[["selector",3]],["bool",15]],[[["tablecolumn",3]],["bool",15]],[[]],[[]],[[]],[[],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[],["pinnedconstraintsystem",3]],[[],["pinnedverificationkey",3]],[[["option",4,[["string",3]]]]],[[]],[[["column",3,[["advice",3]]],["rotation",3]],["expression",4]],[[["column",3,[["any",4]]],["rotation",3]],["expression",4]],[[["column",3,[["fixed",3]]],["rotation",3]],["expression",4]],[[["column",3,[["instance",3]]],["usize",15]],["result",4,[["option",4],["error",4]]]],[[["column",3,[["instance",3]]],["rotation",3]],["expression",4]],[[["selector",3]],["expression",4]],[[["params",3]],["result",6]],[[],["selector",3]],[[["usize",15]]],[[],["option",4,[["error",8]]]],[[]],[[["assigned",4]],["assigned",4]],[[],["assigned",4]],[[["expression",4]],["expression",4]],[[["vec",3,[["column",3,[["fixed",3]]]]]],["result",4,[["error",4]]]],[[],["result",4,[["error",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[["column",3,[["any",4]]]],["result",4]],[[["column",3,[["any",4]]]],["result",4]],[[["column",3,[["any",4]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["paramsverifier",3],["verifyingkey",3]],["result",4,[["choice",3],["error",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["polynomial",3]],["polynomial",3]],[[["polynomial",3,[["extendedlagrangecoeff",3]]],["polynomial",3],["rotation",3]],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coeff",3]],[[],["lagrangecoeff",3]],[[],["extendedlagrangecoeff",3]],[[],["polynomial",3]],[[],["rotation",3]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],["polynomial",3,[["coeff",3]]]],[[["polynomial",3,[["coeff",3]]]],["polynomial",3,[["extendedlagrangecoeff",3]]]],null,[[],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[],["polynomial",3,[["lagrangecoeff",3]]]],[[],["rotation",3]],[[],["rotation",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["polynomial",3,[["extendedlagrangecoeff",3]]]],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["polynomial",3,[["coeff",3]]]],[[],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[],["polynomial",3,[["lagrangecoeff",3]]]],[[["rotation",3]],["bool",15]],[[],["usize",15]],[[["polynomial",3,[["extendedlagrangecoeff",3]]]],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["rangefull",3]]],[[["usize",15]]],[[["rangefrom",3,[["usize",15]]]]],[[["rangefrom",3,[["usize",15]]]]],[[["usize",15]]],[[["rangefull",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",26,[["intoiterator",8],["clone",8]]]],["vec",3]],[[["vec",3]],["polynomial",3,[["lagrangecoeff",3]]]],[[["polynomial",3,[["lagrangecoeff",3]]]],["polynomial",3,[["coeff",3]]]],[[["polynomial",3]],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[],["polynomial",3]],[[["polynomial",3,[["extendedlagrangecoeff",3]]],["polynomial",3],["rotation",3]],["polynomial",3,[["extendedlagrangecoeff",3]]]],null,[[["rotation",3]],["bool",15]],[[],["polynomial",3]],[[["u32",15],["u32",15]]],[[],["rotation",3]],[[],["usize",15]],[[]],[[],["pinnedevaluationdomain",3]],[[],["rotation",3]],[[["rotation",3]],["polynomial",3,[["lagrangecoeff",3]]]],[[["polynomial",3],["rotation",3]],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[["rotation",3]]],[[["polynomial",3]],["polynomial",3]],[[["polynomial",3,[["extendedlagrangecoeff",3]]],["polynomial",3],["rotation",3]],["polynomial",3,[["extendedlagrangecoeff",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["blind",3]]],[[["blind",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blind",3]],[[]],[[["polynomial",3]]],[[["polynomial",3]]],[[["vec",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["msm",3]],[[],["msm",3]],[[["blind",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["blind",3]]],[[]],[[["blind",3]]],[[["blind",3]],["bool",15]],[[["u32",15]],["params",3]],[[],["usize",15]],[[["read",8]],["result",6]],[[["read",8]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["params",3],["usize",15]],["result",6,[["paramsverifier",3]]]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],null,null,[[]],[[]],[[]],[[]],[[],["proverquery",3]],[[],["verifierquery",3]],[[]],[[]],[[["params",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["msm",3]]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["paramsverifier",3]],["result",4,[["choice",3],["error",4]]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["challengescalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blake2bread",3]],[[],["blake2bwrite",3]],[[],["challengescalar",3]],[[],["challenge255",3]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[],["challenge255",3]],[[],["challenge255",3]],[[],["challengescalar",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]]],"p":[[8,"CurveExt"],[8,"CurveAffine"],[8,"FieldExt"],[8,"Engine"],[8,"MultiMillerLoop"],[8,"MillerLoopResult"],[8,"BaseExt"],[8,"PairingCurveAffine"],[8,"Group"],[3,"Coordinates"],[8,"Field"],[8,"Chip"],[8,"Layouter"],[3,"Region"],[3,"Table"],[3,"NamespacedLayouter"],[3,"SimpleFloorPlanner"],[3,"RegionIndex"],[3,"RegionStart"],[3,"Cell"],[3,"V1Pass"],[3,"V1"],[4,"RegionColumn"],[8,"RegionLayouter"],[3,"RegionShape"],[8,"TableLayouter"],[13,"Column"],[13,"Selector"],[4,"VerifyFailure"],[3,"MockProver"],[3,"CircuitGates"],[13,"ConstraintNotSatisfied"],[13,"Cell"],[13,"Permutation"],[13,"ConstraintPoisoned"],[13,"Lookup"],[3,"CircuitCost"],[3,"MarginalProofSize"],[3,"ProofSize"],[3,"Column"],[3,"VirtualCell"],[3,"Gate"],[3,"Constraint"],[3,"Region"],[4,"Any"],[4,"Expression"],[4,"Error"],[8,"Circuit"],[4,"Assigned"],[3,"ConstraintSystem"],[8,"Assignment"],[3,"Column"],[3,"Advice"],[3,"Fixed"],[3,"Instance"],[3,"Selector"],[3,"TableColumn"],[3,"Constraint"],[3,"PinnedConstraintSystem"],[3,"VirtualCells"],[3,"VerifyingKey"],[3,"PinnedVerificationKey"],[3,"ProvingKey"],[8,"FloorPlanner"],[13,"Trivial"],[13,"Rational"],[13,"Transcript"],[13,"ColumnNotInPermutation"],[13,"NotEnoughRowsAvailable"],[13,"Constant"],[13,"Selector"],[13,"Negated"],[13,"Sum"],[13,"Product"],[13,"Scaled"],[13,"Fixed"],[13,"Advice"],[13,"Instance"],[3,"Rotation"],[4,"Error"],[3,"Polynomial"],[3,"EvaluationDomain"],[3,"PinnedEvaluationDomain"],[3,"Coeff"],[3,"LagrangeCoeff"],[3,"ExtendedLagrangeCoeff"],[3,"Blind"],[3,"Params"],[3,"ParamsVerifier"],[3,"Setup"],[3,"ProverQuery"],[3,"VerifierQuery"],[8,"EncodedChallenge"],[3,"Blake2bRead"],[3,"Blake2bWrite"],[3,"ChallengeScalar"],[3,"Challenge255"],[8,"Transcript"],[8,"TranscriptRead"],[8,"TranscriptWrite"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};